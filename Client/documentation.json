{
    "pipes": [],
    "interfaces": [
        {
            "name": "ExampleCrudForm",
            "id": "interface-ExampleCrudForm-64177885f5a8bd2337ca61e34da3fdc9a814e2fcaf9e439a0cf57188a260c602a7799f23464518aa8a06d78a8db4be7d2aa4a70ffb2e8f462ba7866dcc21b65c",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface PasswdRecoveryForm {\n  email: FormControl<string>;\n}\n\nexport interface PasswordsForm {\n  password: FormControl<string>;\n  repeatedPassword: FormControl<string>;\n}\n\nexport interface LoginForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\nexport interface RegisterForm extends LoginForm {\n  firstName: FormControl<string>;\n  lastName: FormControl<string>;\n  username: FormControl<string>;\n  confirmPassword: FormControl<string>;\n}\n\nexport interface ThemeForm {\n  theme: FormControl<boolean>;\n}\n\nexport interface ExampleCrudForm {\n  id: FormControl<string>;\n  name: FormControl<string>;\n  count: FormControl<number>;\n  price: FormControl<number>;\n  isZiemniak: FormControl<boolean>;\n  arrivalDate: FormControl<Date>;\n}\n",
            "properties": [
                {
                    "name": "arrivalDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<Date>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isZiemniak",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAccordionPanelItem",
            "id": "interface-IAccordionPanelItem-8de746c6a7118bb3c2314ad78323121e87281c01c42c635cf3b70e9f78739f50c5d1729b84cc1bf73062554b6631dfd6dba87de2acaaa8ab809a1e5056a38011",
            "file": "src/app/shared/types/accordion.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport interface IAccordionPanelItem {\n  value: string;\n  header: string;\n  contentTemplate: TemplateRef<unknown>;\n}\n\nexport interface IAccordionProps {\n  panels: IAccordionPanelItem[];\n  activeItems: string[];\n  allowMultiple: boolean;\n}\n",
            "properties": [
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAccordionProps",
            "id": "interface-IAccordionProps-8de746c6a7118bb3c2314ad78323121e87281c01c42c635cf3b70e9f78739f50c5d1729b84cc1bf73062554b6631dfd6dba87de2acaaa8ab809a1e5056a38011",
            "file": "src/app/shared/types/accordion.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport interface IAccordionPanelItem {\n  value: string;\n  header: string;\n  contentTemplate: TemplateRef<unknown>;\n}\n\nexport interface IAccordionProps {\n  panels: IAccordionPanelItem[];\n  activeItems: string[];\n  allowMultiple: boolean;\n}\n",
            "properties": [
                {
                    "name": "activeItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "allowMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "panels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccordionPanelItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAltchaProps",
            "id": "interface-IAltchaProps-ee33a42889f3bf4f42b7f92f38bd21555c033409b209c7de161cc335b05402aae3d09ef6e6361e1df2f0782dcb94f3cdd1319e02a5ae970551b99be27a1b6bba",
            "file": "src/app/shared/types/altcha.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAltchaProps {\n  challengeurl?: string;\n  debug?: boolean;\n  test?: boolean;\n  value?: string;\n  style?: Record<string, string>;\n  styleClass?: string;\n}\n",
            "properties": [
                {
                    "name": "challengeurl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "test",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAltchaStatus",
            "id": "interface-IAltchaStatus-b5b22277c969aa7001630205b67a0a325e285251a70955c3ea252c8740d3d21e16dc8e69a4dcc90cf4fdf8006a1e2c01539de258745af7dc17fb695c260c70ea",
            "file": "src/app/shared/models/altcha.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAltchaStatus {\n  state: 'unverified' | 'verifying' | 'verified' | 'error';\n  payload: string;\n}\n",
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"unverified\" | \"verifying\" | \"verified\" | \"error\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAuthRefreshTokensRequestDto",
            "id": "interface-IAuthRefreshTokensRequestDto-9dc35d9aefce77ae159b602e7c2de8c0454a0b12af6147ab0e81f93220c9cecd38e0bb3a437995ba6e128a8b03714a6a023b586cba4995aa70929a949558716a",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\n\nexport interface ILoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface IRegisterDto extends ILoginDto {\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n}\n\nexport interface IAuthTokensResponseDto {\n  accessToken: IAccessToken;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface IAuthRefreshTokensRequestDto {\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface IRevokeTokenRequestDto {\n  refreshToken: string;\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAuthTokensResponseDto",
            "id": "interface-IAuthTokensResponseDto-9dc35d9aefce77ae159b602e7c2de8c0454a0b12af6147ab0e81f93220c9cecd38e0bb3a437995ba6e128a8b03714a6a023b586cba4995aa70929a949558716a",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\n\nexport interface ILoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface IRegisterDto extends ILoginDto {\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n}\n\nexport interface IAuthTokensResponseDto {\n  accessToken: IAccessToken;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface IAuthRefreshTokensRequestDto {\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface IRevokeTokenRequestDto {\n  refreshToken: string;\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccessToken",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "expiresAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IBaseResponse",
            "id": "interface-IBaseResponse-29a621a8add1dc9484bdbc79a6a24413afe159876df0766d48be142dc6f11039974a7aa3761f146d766664250e19de9df3bef49c20b77e6ee972f4550a9c6f7a",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponseWithoutData {\n  success: boolean;\n  statusCode: number;\n  message: string;\n  errors?: string[];\n}\n\nexport interface IBaseResponse<T> extends IBaseResponseWithoutData {\n  data: T;\n  pagination?: IPagination;\n}\n\ninterface IPagination {\n  pageSize: number;\n  pageNumber: number;\n  totalCount: number;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPagination",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "IBaseResponseWithoutData"
            ]
        },
        {
            "name": "IBaseResponseWithoutData",
            "id": "interface-IBaseResponseWithoutData-29a621a8add1dc9484bdbc79a6a24413afe159876df0766d48be142dc6f11039974a7aa3761f146d766664250e19de9df3bef49c20b77e6ee972f4550a9c6f7a",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponseWithoutData {\n  success: boolean;\n  statusCode: number;\n  message: string;\n  errors?: string[];\n}\n\nexport interface IBaseResponse<T> extends IBaseResponseWithoutData {\n  data: T;\n  pagination?: IPagination;\n}\n\ninterface IPagination {\n  pageSize: number;\n  pageNumber: number;\n  totalCount: number;\n}\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "statusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IButtonProps",
            "id": "interface-IButtonProps-dd6c81fa1c84ee0847dc43def00eaecd7b0dc79810367bd3a061ff91eac8a452bc8266ea6066e134f33c34bf7db1eb12c418d2e8c89034b979117c6dbd1bbd46",
            "file": "src/app/shared/types/button.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type IButtonIconPosition = 'left' | 'right' | 'top' | 'bottom';\n\nexport type IButtonSeverity =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'info'\n  | 'warn'\n  | 'help'\n  | 'danger'\n  | 'contrast';\n\nexport type IButtonVariant = 'text' | 'outlined';\n\nexport type IButtonSize = 'small' | 'large';\n\nexport type IButtonBadgeSeverity = 'info' | 'success' | 'warn' | 'danger' | 'contrast';\n\nexport interface IButtonProps {\n  label?: string;\n  icon?: string;\n  iconPos?: IButtonIconPosition;\n  badge?: string;\n  badgeSeverity?: IButtonBadgeSeverity;\n  severity?: IButtonSeverity;\n  raised?: boolean;\n  rounded?: boolean;\n  loading?: boolean;\n  disabled?: boolean;\n  variant?: IButtonVariant;\n  size?: IButtonSize;\n  styleClass?: string;\n  ariaLabel?: string;\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "badgeSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonBadgeSeverity",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iconPos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonIconPosition",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "raised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonSeverity",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonSize",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IChartDataset",
            "id": "interface-IChartDataset-bda99b5a674c9dae6f9e07adf1a3481a48aa6499079f45246ffe3bd98de419b6412a7b92a7af8055aaab08dc062ba5a39757c5bb00e48b7bf13988d7b1dc6b3e",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\n  data: number[];\n  backgroundColor: string[];\n  hoverBackgroundColor?: string[];\n  label?: string;\n}\n\nexport interface IDonutChartData {\n  labels: string[];\n  datasets: IChartDataset[];\n}\n\nexport interface IDonutChartOptions {\n  cutout?: string;\n  plugins?: {\n    legend?: {\n      labels?: {\n        color?: string;\n      };\n      position?: 'top' | 'bottom' | 'left' | 'right';\n    };\n    title?: {\n      display?: boolean;\n      text?: string;\n      color?: string;\n      font?: {\n        size?: number;\n      };\n    };\n  };\n}\n\nexport interface IDonutChartProps {\n  data: IDonutChartData;\n  options: IDonutChartOptions;\n  width: string;\n  height: string;\n  responsive: boolean;\n  chartClass: string;\n  chartStyle: Record<string, string>;\n  ariaLabel: string;\n}\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "hoverBackgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICheckboxProps",
            "id": "interface-ICheckboxProps-bf0f5ab86de0bcdd35f1c15cb37810278dc8342b3d5929d27deb16087300699cf9fbae74ab0731892cd6040d476bff6fdf58f1780b39582b07c2f08d97867092",
            "file": "src/app/shared/types/checkbox.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface ICheckboxProps {\n  label?: string;\n  inputId?: string;\n  name?: string;\n  required?: boolean;\n  formControl: FormControl;\n  value?: boolean;\n  invalid?: boolean;\n  errorMessage?: string;\n}\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IConfirmModalProps",
            "id": "interface-IConfirmModalProps-30618427f3e7fb8ab8dac4382b943dd8bc4f85900e1b280201dc1c425cadfe6d29d7c3b1a0c44c8edcfb71e1f15acd6a84c9f67421f5e5046bc9f9251b5c7a86",
            "file": "src/app/shared/types/modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IConfirmModalProps {\n  header: string;\n  visible: boolean;\n  message: string;\n  yesLabel: string;\n  noLabel: string;\n  onYes: () => void;\n  onNo: () => void;\n}\n\nexport interface IInfoModalProps {\n  header: string;\n  visible: boolean;\n  message: string;\n}\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "noLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "onNo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "onYes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "yesLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IContextMenuAction",
            "id": "interface-IContextMenuAction-b82e6951f076056aadf51a2fc19093402212a9457520a6628372748de8d8d1bf5b319a4af9a574c2eec3b612048d8f35e20efad11aa0c00fdca24297c5175fef",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\n\nexport type Position = 'top' | 'bottom' | 'both';\n\nexport interface ITableColumn {\n  field: string;\n  header: string;\n}\n\nexport interface ITableActionButton {\n  icon: string;\n  severity?: string;\n  ariaLabel: string;\n  action: string;\n}\n\nexport interface IContextMenuAction {\n  originalEvent: Event;\n  item: MenuItem;\n}\n\nexport interface ITableProps<T> {\n  cols: ITableColumn[];\n  data: T[];\n  headerTitle?: string;\n  footerTitle?: string;\n  showGridlines?: boolean;\n  stripedRows?: boolean;\n  rowsPerPage?: number;\n  rowsPerPageOptions?: number[];\n  enablePaginator?: boolean;\n  enableResizableColumns?: boolean;\n  minWidth?: string;\n  showActions: boolean;\n  showSearchBar: boolean;\n  showActionButtons: boolean;\n  defaultSortField: string;\n  defaultSortOrder: number;\n  loading: boolean;\n  totalRecords: number;\n  paginatorPosition: Position;\n  contextMenuItems: MenuItem[];\n  actionButtons: ITableActionButton[];\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\n  onRefreshEvent: EventEmitter<void>;\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\n}\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IContextMenuEvent",
            "id": "interface-IContextMenuEvent-cb500fb1fefc30935efe276cb0ad4e40b7628c299760acad93e681e9e6265f86d53bbf9dd402998ef3cf0015493c44a071872c9de76320fb4a0a60c72d4147b4",
            "file": "src/app/shared/types/context-menu.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from 'primeng/api';\n\nexport interface IContextMenuProps {\n  items: MenuItem[];\n  global?: boolean;\n  appendTo?: string | HTMLElement;\n  autoZIndex?: boolean;\n  baseZIndex?: number;\n  styleClass?: string;\n  style?: Record<string, string>;\n  triggerEvent?: string;\n}\n\nexport interface IContextMenuEvent {\n  originalEvent: MouseEvent;\n  item: MenuItem;\n}\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IContextMenuProps",
            "id": "interface-IContextMenuProps-cb500fb1fefc30935efe276cb0ad4e40b7628c299760acad93e681e9e6265f86d53bbf9dd402998ef3cf0015493c44a071872c9de76320fb4a0a60c72d4147b4",
            "file": "src/app/shared/types/context-menu.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from 'primeng/api';\n\nexport interface IContextMenuProps {\n  items: MenuItem[];\n  global?: boolean;\n  appendTo?: string | HTMLElement;\n  autoZIndex?: boolean;\n  baseZIndex?: number;\n  styleClass?: string;\n  style?: Record<string, string>;\n  triggerEvent?: string;\n}\n\nexport interface IContextMenuEvent {\n  originalEvent: MouseEvent;\n  item: MenuItem;\n}\n",
            "properties": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | HTMLElement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "autoZIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "baseZIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "global",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "triggerEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDecodedToken",
            "id": "interface-IDecodedToken-494f9d04782d9ee47f436cf624dba597ad21f8ea2eb2be8d72775109c6f93211289555008316b2f28cc22de66aa8fdb936317fac9f0571d790024e08d7e64664",
            "file": "src/app/core/_models/decoded-token.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDecodedToken {\n  sub: string;\n  unique_name: string;\n  email: string;\n  security_stamp: string;\n  role: string;\n  nbf: number;\n  exp: number;\n  iat: number;\n  iss: string;\n  aud: string;\n}\n",
            "properties": [
                {
                    "name": "aud",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nbf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "security_stamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "unique_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDonutChartData",
            "id": "interface-IDonutChartData-bda99b5a674c9dae6f9e07adf1a3481a48aa6499079f45246ffe3bd98de419b6412a7b92a7af8055aaab08dc062ba5a39757c5bb00e48b7bf13988d7b1dc6b3e",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\n  data: number[];\n  backgroundColor: string[];\n  hoverBackgroundColor?: string[];\n  label?: string;\n}\n\nexport interface IDonutChartData {\n  labels: string[];\n  datasets: IChartDataset[];\n}\n\nexport interface IDonutChartOptions {\n  cutout?: string;\n  plugins?: {\n    legend?: {\n      labels?: {\n        color?: string;\n      };\n      position?: 'top' | 'bottom' | 'left' | 'right';\n    };\n    title?: {\n      display?: boolean;\n      text?: string;\n      color?: string;\n      font?: {\n        size?: number;\n      };\n    };\n  };\n}\n\nexport interface IDonutChartProps {\n  data: IDonutChartData;\n  options: IDonutChartOptions;\n  width: string;\n  height: string;\n  responsive: boolean;\n  chartClass: string;\n  chartStyle: Record<string, string>;\n  ariaLabel: string;\n}\n",
            "properties": [
                {
                    "name": "datasets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartDataset[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDonutChartOptions",
            "id": "interface-IDonutChartOptions-bda99b5a674c9dae6f9e07adf1a3481a48aa6499079f45246ffe3bd98de419b6412a7b92a7af8055aaab08dc062ba5a39757c5bb00e48b7bf13988d7b1dc6b3e",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\n  data: number[];\n  backgroundColor: string[];\n  hoverBackgroundColor?: string[];\n  label?: string;\n}\n\nexport interface IDonutChartData {\n  labels: string[];\n  datasets: IChartDataset[];\n}\n\nexport interface IDonutChartOptions {\n  cutout?: string;\n  plugins?: {\n    legend?: {\n      labels?: {\n        color?: string;\n      };\n      position?: 'top' | 'bottom' | 'left' | 'right';\n    };\n    title?: {\n      display?: boolean;\n      text?: string;\n      color?: string;\n      font?: {\n        size?: number;\n      };\n    };\n  };\n}\n\nexport interface IDonutChartProps {\n  data: IDonutChartData;\n  options: IDonutChartOptions;\n  width: string;\n  height: string;\n  responsive: boolean;\n  chartClass: string;\n  chartStyle: Record<string, string>;\n  ariaLabel: string;\n}\n",
            "properties": [
                {
                    "name": "cutout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "plugins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDonutChartProps",
            "id": "interface-IDonutChartProps-bda99b5a674c9dae6f9e07adf1a3481a48aa6499079f45246ffe3bd98de419b6412a7b92a7af8055aaab08dc062ba5a39757c5bb00e48b7bf13988d7b1dc6b3e",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\n  data: number[];\n  backgroundColor: string[];\n  hoverBackgroundColor?: string[];\n  label?: string;\n}\n\nexport interface IDonutChartData {\n  labels: string[];\n  datasets: IChartDataset[];\n}\n\nexport interface IDonutChartOptions {\n  cutout?: string;\n  plugins?: {\n    legend?: {\n      labels?: {\n        color?: string;\n      };\n      position?: 'top' | 'bottom' | 'left' | 'right';\n    };\n    title?: {\n      display?: boolean;\n      text?: string;\n      color?: string;\n      font?: {\n        size?: number;\n      };\n    };\n  };\n}\n\nexport interface IDonutChartProps {\n  data: IDonutChartData;\n  options: IDonutChartOptions;\n  width: string;\n  height: string;\n  responsive: boolean;\n  chartClass: string;\n  chartStyle: Record<string, string>;\n  ariaLabel: string;\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "chartClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "chartStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "responsive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IEditorProps",
            "id": "interface-IEditorProps-ac4f39ea802f88e9fad0b35f0f561019e5b4b4cfda1863cb15b29059f630131531fe3b56988e40b3162797bbff5dfa1ea50f3215e65f4b1edddbf022a9226064",
            "file": "src/app/shared/types/editor.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEditorProps {\n  style?: Record<string, string>;\n  styleClass?: string;\n  placeholder?: string;\n  formats?: string[];\n  modules?: Record<string, unknown>;\n  readOnly?: boolean;\n}\n\nexport interface ITextChangeEvent {\n  htmlValue: string;\n  textValue: string;\n  delta: unknown;\n  source: string;\n}\n",
            "properties": [
                {
                    "name": "formats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | >",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFile",
            "id": "interface-IFile-4feb03a40246545834d2e0ef0a17f0b37c26f16e64cb1e98f4d83bce87556eee3f293189848dd448e9a8caf7280f8c95ee35d833bd922a6ce895e887909e620e",
            "file": "src/app/core/_models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFile {\n  id: string;\n  fileName: string;\n  originalFileName: string;\n  contentType: string;\n  size: number;\n  createdAt: string;\n}\n\nexport interface IFileList {\n  files: IFile[];\n}\n",
            "properties": [
                {
                    "name": "contentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "originalFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileEditRequestDto",
            "id": "interface-IFileEditRequestDto-b153d9b56a8b5a44c534396066c843f89445c186cdcbf111139f45365276362c112198e6032df874c03fb33b59e2fb5bc2b9130a9f076f6993c01ef205e1a31d",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\n\nexport interface IFileListResponseDto {\n  content: IFile[];\n  pageable: IPageableFileResponseDto;\n}\n\ninterface IPageableFileResponseDto {\n  totalElements: number;\n  pageNumber: number;\n  pageSize: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport interface IFileEditRequestDto {\n  fileName: string;\n}\n\nexport interface IFileStatsDto {\n  totalSizeBytes: number;\n  totalSizeGB: number;\n  maxSizeGB: number;\n  minSizeGB: number;\n  usagePercentages: number;\n  totalFiles: number;\n  hasAvailableStorage: boolean;\n  availableSizeBytes: number;\n  availableSizeGB: number;\n}\n",
            "properties": [
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileItem",
            "id": "interface-IFileItem-ab1cc7627f0794614b9a44da52b0312c7f1a41566be0279389de85b047655ff816feb580bd63c4aa28dbc428a1d11e195112e9f60c208a027e2b3211c80e859c",
            "file": "src/app/shared/types/file-type.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\n\nexport type Position = 'top' | 'bottom' | 'both';\n\nexport interface IFileItem {\n  id?: string;\n  name: string;\n  type: string;\n  size: number;\n  lastModified: Date;\n  icon?: string;\n}\n\nexport interface IFileTableProps {\n  files: IFileItem[];\n  enablePagination: boolean;\n  rowsPerPage: number;\n  showActions: boolean;\n  showSearchBar: boolean;\n  showActionButtons: boolean;\n  defaultSortField: string;\n  defaultSortOrder: number;\n  loading: boolean;\n  totalRecords: number;\n  paginatorPosition: Position;\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\n  fileAction: EventEmitter<{ action: string; file: IFileItem }>;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastModified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileList",
            "id": "interface-IFileList-4feb03a40246545834d2e0ef0a17f0b37c26f16e64cb1e98f4d83bce87556eee3f293189848dd448e9a8caf7280f8c95ee35d833bd922a6ce895e887909e620e",
            "file": "src/app/core/_models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFile {\n  id: string;\n  fileName: string;\n  originalFileName: string;\n  contentType: string;\n  size: number;\n  createdAt: string;\n}\n\nexport interface IFileList {\n  files: IFile[];\n}\n",
            "properties": [
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileListResponseDto",
            "id": "interface-IFileListResponseDto-b153d9b56a8b5a44c534396066c843f89445c186cdcbf111139f45365276362c112198e6032df874c03fb33b59e2fb5bc2b9130a9f076f6993c01ef205e1a31d",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\n\nexport interface IFileListResponseDto {\n  content: IFile[];\n  pageable: IPageableFileResponseDto;\n}\n\ninterface IPageableFileResponseDto {\n  totalElements: number;\n  pageNumber: number;\n  pageSize: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport interface IFileEditRequestDto {\n  fileName: string;\n}\n\nexport interface IFileStatsDto {\n  totalSizeBytes: number;\n  totalSizeGB: number;\n  maxSizeGB: number;\n  minSizeGB: number;\n  usagePercentages: number;\n  totalFiles: number;\n  hasAvailableStorage: boolean;\n  availableSizeBytes: number;\n  availableSizeGB: number;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPageableFileResponseDto",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileStatsDto",
            "id": "interface-IFileStatsDto-b153d9b56a8b5a44c534396066c843f89445c186cdcbf111139f45365276362c112198e6032df874c03fb33b59e2fb5bc2b9130a9f076f6993c01ef205e1a31d",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\n\nexport interface IFileListResponseDto {\n  content: IFile[];\n  pageable: IPageableFileResponseDto;\n}\n\ninterface IPageableFileResponseDto {\n  totalElements: number;\n  pageNumber: number;\n  pageSize: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport interface IFileEditRequestDto {\n  fileName: string;\n}\n\nexport interface IFileStatsDto {\n  totalSizeBytes: number;\n  totalSizeGB: number;\n  maxSizeGB: number;\n  minSizeGB: number;\n  usagePercentages: number;\n  totalFiles: number;\n  hasAvailableStorage: boolean;\n  availableSizeBytes: number;\n  availableSizeGB: number;\n}\n",
            "properties": [
                {
                    "name": "availableSizeBytes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "availableSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hasAvailableStorage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "maxSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "minSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "totalFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "totalSizeBytes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "totalSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "usagePercentages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileTableProps",
            "id": "interface-IFileTableProps-ab1cc7627f0794614b9a44da52b0312c7f1a41566be0279389de85b047655ff816feb580bd63c4aa28dbc428a1d11e195112e9f60c208a027e2b3211c80e859c",
            "file": "src/app/shared/types/file-type.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\n\nexport type Position = 'top' | 'bottom' | 'both';\n\nexport interface IFileItem {\n  id?: string;\n  name: string;\n  type: string;\n  size: number;\n  lastModified: Date;\n  icon?: string;\n}\n\nexport interface IFileTableProps {\n  files: IFileItem[];\n  enablePagination: boolean;\n  rowsPerPage: number;\n  showActions: boolean;\n  showSearchBar: boolean;\n  showActionButtons: boolean;\n  defaultSortField: string;\n  defaultSortOrder: number;\n  loading: boolean;\n  totalRecords: number;\n  paginatorPosition: Position;\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\n  fileAction: EventEmitter<{ action: string; file: IFileItem }>;\n}\n",
            "properties": [
                {
                    "name": "defaultSortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "defaultSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "enablePagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "fileAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFileItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "onPageChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paginatorPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Position",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rowsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showActionButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showSearchBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileUploadProps",
            "id": "interface-IFileUploadProps-45c0b7981c519133cb78624badc26962325307724b404ec846337cfa014b24847563ee0e3a3c8bf48355e85ab1bd8a7d8d8dc716b244c15cc1718aa2e38de8ce",
            "file": "src/app/shared/types/fileUploader.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpEvent } from '@angular/common/http';\n\nexport type IFileUploadMode = 'basic' | 'advanced';\n\nexport interface IFileUploadProps {\n  url: string;\n  multiple: boolean;\n  accept: string;\n  maxFileSize: number;\n  mode: IFileUploadMode;\n  emptyMessage: string;\n  name: string;\n  auto?: boolean;\n  showCancelButton?: boolean;\n  showUploadButton?: boolean;\n  chooseLabel: string;\n  uploadLabel: string;\n  cancelLabel: string;\n}\n\nexport interface IUploadEvent {\n  originalEvent: HttpEvent<unknown>;\n  files: File[];\n}\n",
            "properties": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "cancelLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "chooseLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "emptyMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFileUploadMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showCancelButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showUploadButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "uploadLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFooterProps",
            "id": "interface-IFooterProps-f93607a27a8b17aab2511e65d29d83c5aaadc69d97a460b5e05ad401bbd979e88e5e3540fb8410a19a57c99fcc50ea965558511a30aef7db2ca4b01011e7a45a",
            "file": "src/app/shared/types/footer.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IMenuItem } from './navbar.types';\n\nexport interface IFooterProps {\n  logo?: string;\n  title?: string;\n  links?: IMenuItem[];\n  socialLinks?: IMenuItem[];\n  customClass?: string;\n}\n",
            "properties": [
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "socialLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IImageProps",
            "id": "interface-IImageProps-f17c72f7d9aa1a401247a0315c88c615c87b46fae95e4a1c87723a37596791a96d44904efe890119f849d8f62779d3080c1378e88233950d98da0f4cfe566f99",
            "file": "src/app/shared/types/image.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IImageProps {\n  src: string;\n  alt?: string;\n  width?: string;\n  height?: string;\n  preview?: boolean;\n  imageClass?: string;\n  imageStyle?: Record<string, string>;\n  appendTo?: string | HTMLElement;\n}\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | HTMLElement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "imageClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imageStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "preview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IInfoModalProps",
            "id": "interface-IInfoModalProps-30618427f3e7fb8ab8dac4382b943dd8bc4f85900e1b280201dc1c425cadfe6d29d7c3b1a0c44c8edcfb71e1f15acd6a84c9f67421f5e5046bc9f9251b5c7a86",
            "file": "src/app/shared/types/modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IConfirmModalProps {\n  header: string;\n  visible: boolean;\n  message: string;\n  yesLabel: string;\n  noLabel: string;\n  onYes: () => void;\n  onNo: () => void;\n}\n\nexport interface IInfoModalProps {\n  header: string;\n  visible: boolean;\n  message: string;\n}\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IInputProps",
            "id": "interface-IInputProps-9f2576792ca14401581c3164777edf550979423071ca28502fa1ca642f4da5ae1cc6e59a91b066b112563ba0efcb086e63fa2377ce8015859247cb3609d4ee4b",
            "file": "src/app/shared/types/input.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\nimport { IAutocompletePersonalInfo } from './auto-complete.types';\n\nexport type IInputTypes = 'text' | 'number' | 'email' | 'password' | 'tel' | 'url';\n\nexport type IInputIcons =\n  | 'user'\n  | 'map'\n  | 'clock'\n  | 'star'\n  | 'check'\n  | 'times'\n  | 'shopping-cart'\n  | 'search';\n\nexport interface IInputProps {\n  label?: string;\n  placeholder?: string;\n  type?: IInputTypes;\n  required?: boolean;\n  errorMessage?: string;\n  prefixIcon?: IInputIcons;\n  prefixText?: string;\n  suffixIcon?: IInputIcons;\n  suffixText?: string;\n  inavlid?: boolean;\n  autocomplete: IAutocompletePersonalInfo;\n  formControl: FormControl;\n}\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAutocompletePersonalInfo",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "prefixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputIcons",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "prefixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputIcons",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "suffixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputTypes",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IKarmelki",
            "id": "interface-IKarmelki-becf57508ce3b7718a795bc267438bc4dca055849d7895eb98f6685d3ad0f38f14f6c0108b9d4cf750850b5d9730272a028f64f8bbd25acb70dc3a0a530057fa",
            "file": "src/app/core/_models/karmelki.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IKarmelki {\n  id?: string;\n  name: string;\n  count: number;\n  price: number;\n  isZiemniak: boolean;\n  arrivalDate: Date;\n}\n\nexport interface IKarmelkiResponse {\n  items: IKarmelki[];\n  totalCount: number;\n  pageNumber: number;\n  pageSize: number;\n}\n",
            "properties": [
                {
                    "name": "arrivalDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isZiemniak",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IKarmelkiResponse",
            "id": "interface-IKarmelkiResponse-becf57508ce3b7718a795bc267438bc4dca055849d7895eb98f6685d3ad0f38f14f6c0108b9d4cf750850b5d9730272a028f64f8bbd25acb70dc3a0a530057fa",
            "file": "src/app/core/_models/karmelki.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IKarmelki {\n  id?: string;\n  name: string;\n  count: number;\n  price: number;\n  isZiemniak: boolean;\n  arrivalDate: Date;\n}\n\nexport interface IKarmelkiResponse {\n  items: IKarmelki[];\n  totalCount: number;\n  pageNumber: number;\n  pageSize: number;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IKarmelki[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Ilang",
            "id": "interface-Ilang-4fe1acfd34802625dc9a1124b605cce76518d517f77453bffb676c0dfbb22033bba78917a03c6879c9fd1f11b7f8fb297aa49087863f9f94bc905e9e0122460e",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\n  label: string;\n  icon?: string;\n  routerLink?: string;\n  url?: string;\n  target?: string;\n  command?: () => void;\n  queryParams?: Record<string, string>;\n  items?: IMenuItem[];\n  visible?: boolean;\n  disabled?: boolean;\n  expanded?: boolean;\n}\nexport interface IUser {\n  name: string;\n  avatar?: string;\n  id?: string;\n  role?: string;\n}\n\nexport interface Ilang {\n  label: string;\n  value: string;\n}\n\nexport type ILangs = Ilang[];\n\nexport interface INavbarProps {\n  title: string;\n  logo?: string;\n  commonMenuItems: IMenuItem[];\n  authMenuItems: IMenuItem[];\n  nonAuthMenuItems: IMenuItem[];\n  sticky?: boolean;\n  customClass?: string;\n  showSwitchTheme?: boolean;\n  showSwitchLang?: boolean;\n  langs: ILangs;\n  isAuthenticated?: boolean;\n  user?: IUser;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILanguage",
            "id": "interface-ILanguage-58191a37218cd82f1b881189882ac1b271d39f07a2c8c0f54e23bbb4c4ba09413292f03559ef71e5f2b533e4cefd68e6f25d3ff22d6b7a778813ce2eeec583bd",
            "file": "src/app/core/_models/language.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILanguage {\n  label: string;\n  value: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILoginDto",
            "id": "interface-ILoginDto-9dc35d9aefce77ae159b602e7c2de8c0454a0b12af6147ab0e81f93220c9cecd38e0bb3a437995ba6e128a8b03714a6a023b586cba4995aa70929a949558716a",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\n\nexport interface ILoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface IRegisterDto extends ILoginDto {\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n}\n\nexport interface IAuthTokensResponseDto {\n  accessToken: IAccessToken;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface IAuthRefreshTokensRequestDto {\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface IRevokeTokenRequestDto {\n  refreshToken: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMenuItem",
            "id": "interface-IMenuItem-4fe1acfd34802625dc9a1124b605cce76518d517f77453bffb676c0dfbb22033bba78917a03c6879c9fd1f11b7f8fb297aa49087863f9f94bc905e9e0122460e",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\n  label: string;\n  icon?: string;\n  routerLink?: string;\n  url?: string;\n  target?: string;\n  command?: () => void;\n  queryParams?: Record<string, string>;\n  items?: IMenuItem[];\n  visible?: boolean;\n  disabled?: boolean;\n  expanded?: boolean;\n}\nexport interface IUser {\n  name: string;\n  avatar?: string;\n  id?: string;\n  role?: string;\n}\n\nexport interface Ilang {\n  label: string;\n  value: string;\n}\n\nexport type ILangs = Ilang[];\n\nexport interface INavbarProps {\n  title: string;\n  logo?: string;\n  commonMenuItems: IMenuItem[];\n  authMenuItems: IMenuItem[];\n  nonAuthMenuItems: IMenuItem[];\n  sticky?: boolean;\n  customClass?: string;\n  showSwitchTheme?: boolean;\n  showSwitchLang?: boolean;\n  langs: ILangs;\n  isAuthenticated?: boolean;\n  user?: IUser;\n}\n",
            "properties": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "INavbarProps",
            "id": "interface-INavbarProps-4fe1acfd34802625dc9a1124b605cce76518d517f77453bffb676c0dfbb22033bba78917a03c6879c9fd1f11b7f8fb297aa49087863f9f94bc905e9e0122460e",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\n  label: string;\n  icon?: string;\n  routerLink?: string;\n  url?: string;\n  target?: string;\n  command?: () => void;\n  queryParams?: Record<string, string>;\n  items?: IMenuItem[];\n  visible?: boolean;\n  disabled?: boolean;\n  expanded?: boolean;\n}\nexport interface IUser {\n  name: string;\n  avatar?: string;\n  id?: string;\n  role?: string;\n}\n\nexport interface Ilang {\n  label: string;\n  value: string;\n}\n\nexport type ILangs = Ilang[];\n\nexport interface INavbarProps {\n  title: string;\n  logo?: string;\n  commonMenuItems: IMenuItem[];\n  authMenuItems: IMenuItem[];\n  nonAuthMenuItems: IMenuItem[];\n  sticky?: boolean;\n  customClass?: string;\n  showSwitchTheme?: boolean;\n  showSwitchLang?: boolean;\n  langs: ILangs;\n  isAuthenticated?: boolean;\n  user?: IUser;\n}\n",
            "properties": [
                {
                    "name": "authMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "commonMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILangs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nonAuthMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showSwitchLang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showSwitchTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPageableFileResponseDto",
            "id": "interface-IPageableFileResponseDto-b153d9b56a8b5a44c534396066c843f89445c186cdcbf111139f45365276362c112198e6032df874c03fb33b59e2fb5bc2b9130a9f076f6993c01ef205e1a31d",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\n\nexport interface IFileListResponseDto {\n  content: IFile[];\n  pageable: IPageableFileResponseDto;\n}\n\ninterface IPageableFileResponseDto {\n  totalElements: number;\n  pageNumber: number;\n  pageSize: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport interface IFileEditRequestDto {\n  fileName: string;\n}\n\nexport interface IFileStatsDto {\n  totalSizeBytes: number;\n  totalSizeGB: number;\n  maxSizeGB: number;\n  minSizeGB: number;\n  usagePercentages: number;\n  totalFiles: number;\n  hasAvailableStorage: boolean;\n  availableSizeBytes: number;\n  availableSizeGB: number;\n}\n",
            "properties": [
                {
                    "name": "hasNext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hasPrevious",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPagedQueryParams",
            "id": "interface-IPagedQueryParams-ab9cee954a08772e82befb0a3b2b9a661958ed5f08de3adb88b1107cb1fd8dab9dbfd80365a3d86e96bfaaab539a9d190b824dbd505864b77400a71f96b28b5b",
            "file": "src/app/core/_models/paged-query-params.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPagedQueryParams {\n  pageNumber: number;\n  pageSize: number;\n  filter?: string;\n  sortBy?: string;\n  sortDescending?: boolean;\n  includeInactive?: boolean;\n}\n",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "includeInactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sortDescending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPagination",
            "id": "interface-IPagination-29a621a8add1dc9484bdbc79a6a24413afe159876df0766d48be142dc6f11039974a7aa3761f146d766664250e19de9df3bef49c20b77e6ee972f4550a9c6f7a",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponseWithoutData {\n  success: boolean;\n  statusCode: number;\n  message: string;\n  errors?: string[];\n}\n\nexport interface IBaseResponse<T> extends IBaseResponseWithoutData {\n  data: T;\n  pagination?: IPagination;\n}\n\ninterface IPagination {\n  pageSize: number;\n  pageNumber: number;\n  totalCount: number;\n}\n",
            "properties": [
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPasswordInputProps",
            "id": "interface-IPasswordInputProps-4d5da46d12001a8ac3375492967c602cf219d8f7291e2435d0e64d2f66a6642f91e60c458e0e849fcd7bd9bb9b6b419248b5c1451a19182a4acba7a865280018",
            "file": "src/app/shared/types/password-input.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\nimport { IAutocompletePassword } from './auto-complete.types';\n\nexport type IVariant = 'filled' | 'outlined';\n\nexport interface IPasswordInputProps {\n  label?: string;\n  placeholder?: string;\n  required?: boolean;\n  invalid?: boolean;\n  errorMessage?: string;\n  feedback?: boolean;\n  promptLabel?: string;\n  weakLabel?: string;\n  mediumLabel?: string;\n  strongLabel?: string;\n  variant: IVariant;\n  inavlid?: boolean;\n  formControl: FormControl;\n  autocomplete: IAutocompletePassword;\n}\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAutocompletePassword",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IVariant",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IQueryParams",
            "id": "interface-IQueryParams-e79987169ff2f2565c1e5446a46a04b4f0b5486d878a38bdb5995aaab1f7b0a1331428f54eda6c648cd55edbb9a174a316459937a5c8034dca1e9b2fb7fbdcab",
            "file": "src/app/core/_models/query-params.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface IQueryParams {\n  params?: HttpParams;\n  headers?: HttpHeaders;\n}\n",
            "properties": [
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpHeaders",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParams",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRefreshToken",
            "id": "interface-IRefreshToken-a33fbffde20ca341109e9338953fb6a8a4ef947b1d17d9dfd576647329c5ca1e1bd783022c86181bb00184589b8c1b469c74df02b72015a1362f22cfb160556e",
            "file": "src/app/core/_models/tokens.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITokens {\n  accessToken: IAccessToken;\n  refreshToken: IRefreshToken;\n}\n\nexport type IAccessToken = string;\nexport interface IRefreshToken {\n  refreshToken: string;\n  expiresAt: string;\n}\n",
            "properties": [
                {
                    "name": "expiresAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRegisterDto",
            "id": "interface-IRegisterDto-9dc35d9aefce77ae159b602e7c2de8c0454a0b12af6147ab0e81f93220c9cecd38e0bb3a437995ba6e128a8b03714a6a023b586cba4995aa70929a949558716a",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\n\nexport interface ILoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface IRegisterDto extends ILoginDto {\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n}\n\nexport interface IAuthTokensResponseDto {\n  accessToken: IAccessToken;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface IAuthRefreshTokensRequestDto {\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface IRevokeTokenRequestDto {\n  refreshToken: string;\n}\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ILoginDto"
            ]
        },
        {
            "name": "IReusableModalProps",
            "id": "interface-IReusableModalProps-61e121934af5ef4c00e0672496b10a4a69b328dacde5e6fe7c36b583d9320cefbd6b4aa06db227d2db4c3854a957c6d3d8c42663a00dee9ba8983f5887a76665",
            "file": "src/app/shared/types/resuable-modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IReusableModalProps {\n  header?: string;\n  visible?: boolean;\n  draggable?: boolean;\n}\n",
            "properties": [
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRevokeTokenRequestDto",
            "id": "interface-IRevokeTokenRequestDto-9dc35d9aefce77ae159b602e7c2de8c0454a0b12af6147ab0e81f93220c9cecd38e0bb3a437995ba6e128a8b03714a6a023b586cba4995aa70929a949558716a",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\n\nexport interface ILoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface IRegisterDto extends ILoginDto {\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n}\n\nexport interface IAuthTokensResponseDto {\n  accessToken: IAccessToken;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface IAuthRefreshTokensRequestDto {\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface IRevokeTokenRequestDto {\n  refreshToken: string;\n}\n",
            "properties": [
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISelectOption",
            "id": "interface-ISelectOption-15c972ef2ae5d33acca3119e75dee6a2598b967d6f427c54915dcbd24cd055bbe9843348ba90a2eb486066fb238eb0e81231c3edcbde06413ad53a1b31d8e09e",
            "file": "src/app/shared/types/select.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface ISelectOption {\n  label: string;\n  value: string;\n}\n\nexport type ISelectOptions = ISelectOption[];\n\nexport type IVariant = 'filled' | 'outlined';\n\nexport type ILabelVariant = 'over' | 'in' | 'on';\n\nexport interface ISelectProps<T = ISelectOption> {\n  formControl: FormControl;\n  checkmark: boolean;\n  showClear: boolean;\n  editable: boolean;\n  loading: boolean;\n  options?: T[];\n  optionLabel?: string;\n  optionValue?: string;\n  placeholder?: string;\n  required?: boolean;\n  filter?: boolean;\n  filterBy?: string;\n  virtualScroll?: boolean;\n  virtualScrollItemSize?: number;\n  value?: T;\n  variant?: IVariant;\n  label?: string;\n  labelVariant?: ILabelVariant;\n  inputId?: string;\n  inavlid?: boolean;\n  errorMessage?: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISelectProps",
            "id": "interface-ISelectProps-15c972ef2ae5d33acca3119e75dee6a2598b967d6f427c54915dcbd24cd055bbe9843348ba90a2eb486066fb238eb0e81231c3edcbde06413ad53a1b31d8e09e",
            "file": "src/app/shared/types/select.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface ISelectOption {\n  label: string;\n  value: string;\n}\n\nexport type ISelectOptions = ISelectOption[];\n\nexport type IVariant = 'filled' | 'outlined';\n\nexport type ILabelVariant = 'over' | 'in' | 'on';\n\nexport interface ISelectProps<T = ISelectOption> {\n  formControl: FormControl;\n  checkmark: boolean;\n  showClear: boolean;\n  editable: boolean;\n  loading: boolean;\n  options?: T[];\n  optionLabel?: string;\n  optionValue?: string;\n  placeholder?: string;\n  required?: boolean;\n  filter?: boolean;\n  filterBy?: string;\n  virtualScroll?: boolean;\n  virtualScrollItemSize?: number;\n  value?: T;\n  variant?: IVariant;\n  label?: string;\n  labelVariant?: ILabelVariant;\n  inputId?: string;\n  inavlid?: boolean;\n  errorMessage?: string;\n}\n",
            "properties": [
                {
                    "name": "checkmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "editable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "labelVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILabelVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "virtualScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITableActionButton",
            "id": "interface-ITableActionButton-b82e6951f076056aadf51a2fc19093402212a9457520a6628372748de8d8d1bf5b319a4af9a574c2eec3b612048d8f35e20efad11aa0c00fdca24297c5175fef",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\n\nexport type Position = 'top' | 'bottom' | 'both';\n\nexport interface ITableColumn {\n  field: string;\n  header: string;\n}\n\nexport interface ITableActionButton {\n  icon: string;\n  severity?: string;\n  ariaLabel: string;\n  action: string;\n}\n\nexport interface IContextMenuAction {\n  originalEvent: Event;\n  item: MenuItem;\n}\n\nexport interface ITableProps<T> {\n  cols: ITableColumn[];\n  data: T[];\n  headerTitle?: string;\n  footerTitle?: string;\n  showGridlines?: boolean;\n  stripedRows?: boolean;\n  rowsPerPage?: number;\n  rowsPerPageOptions?: number[];\n  enablePaginator?: boolean;\n  enableResizableColumns?: boolean;\n  minWidth?: string;\n  showActions: boolean;\n  showSearchBar: boolean;\n  showActionButtons: boolean;\n  defaultSortField: string;\n  defaultSortOrder: number;\n  loading: boolean;\n  totalRecords: number;\n  paginatorPosition: Position;\n  contextMenuItems: MenuItem[];\n  actionButtons: ITableActionButton[];\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\n  onRefreshEvent: EventEmitter<void>;\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITableColumn",
            "id": "interface-ITableColumn-b82e6951f076056aadf51a2fc19093402212a9457520a6628372748de8d8d1bf5b319a4af9a574c2eec3b612048d8f35e20efad11aa0c00fdca24297c5175fef",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\n\nexport type Position = 'top' | 'bottom' | 'both';\n\nexport interface ITableColumn {\n  field: string;\n  header: string;\n}\n\nexport interface ITableActionButton {\n  icon: string;\n  severity?: string;\n  ariaLabel: string;\n  action: string;\n}\n\nexport interface IContextMenuAction {\n  originalEvent: Event;\n  item: MenuItem;\n}\n\nexport interface ITableProps<T> {\n  cols: ITableColumn[];\n  data: T[];\n  headerTitle?: string;\n  footerTitle?: string;\n  showGridlines?: boolean;\n  stripedRows?: boolean;\n  rowsPerPage?: number;\n  rowsPerPageOptions?: number[];\n  enablePaginator?: boolean;\n  enableResizableColumns?: boolean;\n  minWidth?: string;\n  showActions: boolean;\n  showSearchBar: boolean;\n  showActionButtons: boolean;\n  defaultSortField: string;\n  defaultSortOrder: number;\n  loading: boolean;\n  totalRecords: number;\n  paginatorPosition: Position;\n  contextMenuItems: MenuItem[];\n  actionButtons: ITableActionButton[];\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\n  onRefreshEvent: EventEmitter<void>;\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITableProps",
            "id": "interface-ITableProps-b82e6951f076056aadf51a2fc19093402212a9457520a6628372748de8d8d1bf5b319a4af9a574c2eec3b612048d8f35e20efad11aa0c00fdca24297c5175fef",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\n\nexport type Position = 'top' | 'bottom' | 'both';\n\nexport interface ITableColumn {\n  field: string;\n  header: string;\n}\n\nexport interface ITableActionButton {\n  icon: string;\n  severity?: string;\n  ariaLabel: string;\n  action: string;\n}\n\nexport interface IContextMenuAction {\n  originalEvent: Event;\n  item: MenuItem;\n}\n\nexport interface ITableProps<T> {\n  cols: ITableColumn[];\n  data: T[];\n  headerTitle?: string;\n  footerTitle?: string;\n  showGridlines?: boolean;\n  stripedRows?: boolean;\n  rowsPerPage?: number;\n  rowsPerPageOptions?: number[];\n  enablePaginator?: boolean;\n  enableResizableColumns?: boolean;\n  minWidth?: string;\n  showActions: boolean;\n  showSearchBar: boolean;\n  showActionButtons: boolean;\n  defaultSortField: string;\n  defaultSortOrder: number;\n  loading: boolean;\n  totalRecords: number;\n  paginatorPosition: Position;\n  contextMenuItems: MenuItem[];\n  actionButtons: ITableActionButton[];\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\n  onRefreshEvent: EventEmitter<void>;\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\n}\n",
            "properties": [
                {
                    "name": "actionButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITableActionButton[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITableColumn[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "contextMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "defaultSortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "defaultSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "enablePaginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "enableResizableColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "footerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onActionEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "onContextMenuActionEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "onPageChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "onRefreshEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "paginatorPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Position",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "rowsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "rowsPerPageOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showActionButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showGridlines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showSearchBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "stripedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITextChangeEvent",
            "id": "interface-ITextChangeEvent-ac4f39ea802f88e9fad0b35f0f561019e5b4b4cfda1863cb15b29059f630131531fe3b56988e40b3162797bbff5dfa1ea50f3215e65f4b1edddbf022a9226064",
            "file": "src/app/shared/types/editor.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEditorProps {\n  style?: Record<string, string>;\n  styleClass?: string;\n  placeholder?: string;\n  formats?: string[];\n  modules?: Record<string, unknown>;\n  readOnly?: boolean;\n}\n\nexport interface ITextChangeEvent {\n  htmlValue: string;\n  textValue: string;\n  delta: unknown;\n  source: string;\n}\n",
            "properties": [
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "htmlValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "textValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IToggleSwitchProps",
            "id": "interface-IToggleSwitchProps-3b5feea42f465b047e3ccaadd797730d44893d559f30c01a33c8e5ccc073920892a47b0d730b414ccce68e674b4f23107f1c1e9f4b5ad303935e4d894e1b4592",
            "file": "src/app/shared/types/toogleSwitch.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface IToggleSwitchProps {\n  formControl?: FormControl;\n  iconOn?: string;\n  iconOff?: string;\n  invalid?: boolean;\n  errorMessage?: string;\n  required?: boolean;\n  label?: string;\n}\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconOff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "iconOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITokens",
            "id": "interface-ITokens-a33fbffde20ca341109e9338953fb6a8a4ef947b1d17d9dfd576647329c5ca1e1bd783022c86181bb00184589b8c1b469c74df02b72015a1362f22cfb160556e",
            "file": "src/app/core/_models/tokens.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITokens {\n  accessToken: IAccessToken;\n  refreshToken: IRefreshToken;\n}\n\nexport type IAccessToken = string;\nexport interface IRefreshToken {\n  refreshToken: string;\n  expiresAt: string;\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccessToken",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRefreshToken",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUploadEvent",
            "id": "interface-IUploadEvent-45c0b7981c519133cb78624badc26962325307724b404ec846337cfa014b24847563ee0e3a3c8bf48355e85ab1bd8a7d8d8dc716b244c15cc1718aa2e38de8ce",
            "file": "src/app/shared/types/fileUploader.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpEvent } from '@angular/common/http';\n\nexport type IFileUploadMode = 'basic' | 'advanced';\n\nexport interface IFileUploadProps {\n  url: string;\n  multiple: boolean;\n  accept: string;\n  maxFileSize: number;\n  mode: IFileUploadMode;\n  emptyMessage: string;\n  name: string;\n  auto?: boolean;\n  showCancelButton?: boolean;\n  showUploadButton?: boolean;\n  chooseLabel: string;\n  uploadLabel: string;\n  cancelLabel: string;\n}\n\nexport interface IUploadEvent {\n  originalEvent: HttpEvent<unknown>;\n  files: File[];\n}\n",
            "properties": [
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpEvent<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-4fe1acfd34802625dc9a1124b605cce76518d517f77453bffb676c0dfbb22033bba78917a03c6879c9fd1f11b7f8fb297aa49087863f9f94bc905e9e0122460e",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\n  label: string;\n  icon?: string;\n  routerLink?: string;\n  url?: string;\n  target?: string;\n  command?: () => void;\n  queryParams?: Record<string, string>;\n  items?: IMenuItem[];\n  visible?: boolean;\n  disabled?: boolean;\n  expanded?: boolean;\n}\nexport interface IUser {\n  name: string;\n  avatar?: string;\n  id?: string;\n  role?: string;\n}\n\nexport interface Ilang {\n  label: string;\n  value: string;\n}\n\nexport type ILangs = Ilang[];\n\nexport interface INavbarProps {\n  title: string;\n  logo?: string;\n  commonMenuItems: IMenuItem[];\n  authMenuItems: IMenuItem[];\n  nonAuthMenuItems: IMenuItem[];\n  sticky?: boolean;\n  customClass?: string;\n  showSwitchTheme?: boolean;\n  showSwitchLang?: boolean;\n  langs: ILangs;\n  isAuthenticated?: boolean;\n  user?: IUser;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginForm",
            "id": "interface-LoginForm-64177885f5a8bd2337ca61e34da3fdc9a814e2fcaf9e439a0cf57188a260c602a7799f23464518aa8a06d78a8db4be7d2aa4a70ffb2e8f462ba7866dcc21b65c",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface PasswdRecoveryForm {\n  email: FormControl<string>;\n}\n\nexport interface PasswordsForm {\n  password: FormControl<string>;\n  repeatedPassword: FormControl<string>;\n}\n\nexport interface LoginForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\nexport interface RegisterForm extends LoginForm {\n  firstName: FormControl<string>;\n  lastName: FormControl<string>;\n  username: FormControl<string>;\n  confirmPassword: FormControl<string>;\n}\n\nexport interface ThemeForm {\n  theme: FormControl<boolean>;\n}\n\nexport interface ExampleCrudForm {\n  id: FormControl<string>;\n  name: FormControl<string>;\n  count: FormControl<number>;\n  price: FormControl<number>;\n  isZiemniak: FormControl<boolean>;\n  arrivalDate: FormControl<Date>;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswdRecoveryForm",
            "id": "interface-PasswdRecoveryForm-64177885f5a8bd2337ca61e34da3fdc9a814e2fcaf9e439a0cf57188a260c602a7799f23464518aa8a06d78a8db4be7d2aa4a70ffb2e8f462ba7866dcc21b65c",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface PasswdRecoveryForm {\n  email: FormControl<string>;\n}\n\nexport interface PasswordsForm {\n  password: FormControl<string>;\n  repeatedPassword: FormControl<string>;\n}\n\nexport interface LoginForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\nexport interface RegisterForm extends LoginForm {\n  firstName: FormControl<string>;\n  lastName: FormControl<string>;\n  username: FormControl<string>;\n  confirmPassword: FormControl<string>;\n}\n\nexport interface ThemeForm {\n  theme: FormControl<boolean>;\n}\n\nexport interface ExampleCrudForm {\n  id: FormControl<string>;\n  name: FormControl<string>;\n  count: FormControl<number>;\n  price: FormControl<number>;\n  isZiemniak: FormControl<boolean>;\n  arrivalDate: FormControl<Date>;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswordsForm",
            "id": "interface-PasswordsForm-64177885f5a8bd2337ca61e34da3fdc9a814e2fcaf9e439a0cf57188a260c602a7799f23464518aa8a06d78a8db4be7d2aa4a70ffb2e8f462ba7866dcc21b65c",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface PasswdRecoveryForm {\n  email: FormControl<string>;\n}\n\nexport interface PasswordsForm {\n  password: FormControl<string>;\n  repeatedPassword: FormControl<string>;\n}\n\nexport interface LoginForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\nexport interface RegisterForm extends LoginForm {\n  firstName: FormControl<string>;\n  lastName: FormControl<string>;\n  username: FormControl<string>;\n  confirmPassword: FormControl<string>;\n}\n\nexport interface ThemeForm {\n  theme: FormControl<boolean>;\n}\n\nexport interface ExampleCrudForm {\n  id: FormControl<string>;\n  name: FormControl<string>;\n  count: FormControl<number>;\n  price: FormControl<number>;\n  isZiemniak: FormControl<boolean>;\n  arrivalDate: FormControl<Date>;\n}\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "repeatedPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterForm",
            "id": "interface-RegisterForm-64177885f5a8bd2337ca61e34da3fdc9a814e2fcaf9e439a0cf57188a260c602a7799f23464518aa8a06d78a8db4be7d2aa4a70ffb2e8f462ba7866dcc21b65c",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface PasswdRecoveryForm {\n  email: FormControl<string>;\n}\n\nexport interface PasswordsForm {\n  password: FormControl<string>;\n  repeatedPassword: FormControl<string>;\n}\n\nexport interface LoginForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\nexport interface RegisterForm extends LoginForm {\n  firstName: FormControl<string>;\n  lastName: FormControl<string>;\n  username: FormControl<string>;\n  confirmPassword: FormControl<string>;\n}\n\nexport interface ThemeForm {\n  theme: FormControl<boolean>;\n}\n\nexport interface ExampleCrudForm {\n  id: FormControl<string>;\n  name: FormControl<string>;\n  count: FormControl<number>;\n  price: FormControl<number>;\n  isZiemniak: FormControl<boolean>;\n  arrivalDate: FormControl<Date>;\n}\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LoginForm"
            ]
        },
        {
            "name": "ThemeForm",
            "id": "interface-ThemeForm-64177885f5a8bd2337ca61e34da3fdc9a814e2fcaf9e439a0cf57188a260c602a7799f23464518aa8a06d78a8db4be7d2aa4a70ffb2e8f462ba7866dcc21b65c",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface PasswdRecoveryForm {\n  email: FormControl<string>;\n}\n\nexport interface PasswordsForm {\n  password: FormControl<string>;\n  repeatedPassword: FormControl<string>;\n}\n\nexport interface LoginForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\nexport interface RegisterForm extends LoginForm {\n  firstName: FormControl<string>;\n  lastName: FormControl<string>;\n  username: FormControl<string>;\n  confirmPassword: FormControl<string>;\n}\n\nexport interface ThemeForm {\n  theme: FormControl<boolean>;\n}\n\nexport interface ExampleCrudForm {\n  id: FormControl<string>;\n  name: FormControl<string>;\n  count: FormControl<number>;\n  price: FormControl<number>;\n  isZiemniak: FormControl<boolean>;\n  arrivalDate: FormControl<Date>;\n}\n",
            "properties": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-cea000a6f1821398d64333edf5b96843a7825d439c14d174940d3e5b5249dd5acfc8c4a6042cb6d684a841ea73d9e2179ec84c44eb8c4bc766bac368f5257178",
            "file": "src/app/core/_services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "isLogged",
                    "defaultValue": "signal<boolean>(this.isAuth())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roleService",
                    "defaultValue": "inject(RoleService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toastService",
                    "defaultValue": "inject(ToastService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokenService",
                    "defaultValue": "inject(TokenService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "loginData",
                            "type": "ILoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IAuthTokensResponseDto>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loginData",
                            "type": "ILoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "registerData",
                            "type": "IRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IAuthTokensResponseDto>>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerData",
                            "type": "IRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, signal } from '@angular/core';\r\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\r\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { IBaseResponse, IBaseResponseWithoutData } from '../../_models/base-response.model';\r\nimport {\r\n  IAuthTokensResponseDto,\r\n  ILoginDto,\r\n  IRegisterDto,\r\n  IRevokeTokenRequestDto,\r\n} from '../../_models/DTOs/authDto.model';\r\nimport { TokenService } from '../token/token.service';\r\nimport { IAccessToken } from '../../_models/tokens.model';\r\nimport { Router } from '@angular/router';\r\nimport { ToastService } from '../../../shared/services/toast.service';\r\nimport { RoleService } from '../role/role.service';\r\nimport { RouterEnum } from '../../../enums/router.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private requestFactory = inject(RequestFactoryService);\r\n  private tokenService = inject(TokenService);\r\n  private router = inject(Router);\r\n  private toastService = inject(ToastService);\r\n  private roleService = inject(RoleService);\r\n\r\n  public isLogged = signal<boolean>(this.isAuth());\r\n\r\n  constructor() {\r\n    this.initRoles();\r\n  }\r\n\r\n  signIn(loginData: ILoginDto): Observable<IBaseResponse<IAuthTokensResponseDto>> {\r\n    return this.requestFactory\r\n      .post<IAuthTokensResponseDto, ILoginDto>(ApiEndpoints.SIGN_IN, loginData)\r\n      .pipe(\r\n        tap((res: IBaseResponse<IAuthTokensResponseDto>) => {\r\n          if (res.success && res.data) {\r\n            this.tokenService.setTokens(res.data.accessToken, {\r\n              refreshToken: res.data.refreshToken,\r\n              expiresAt: res.data.expiresAt,\r\n            });\r\n            this.isLogged.set(true);\r\n            this.router.navigate(['/']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  signUp(registerData: IRegisterDto): Observable<IBaseResponse<IAuthTokensResponseDto>> {\r\n    return this.requestFactory\r\n      .post<IAuthTokensResponseDto, IRegisterDto>(ApiEndpoints.SIGN_UP, registerData)\r\n      .pipe(\r\n        tap((res: IBaseResponse<IAuthTokensResponseDto>) => {\r\n          if (res.success && res.data) {\r\n            this.tokenService.setTokens(res.data.accessToken, {\r\n              refreshToken: res.data.refreshToken,\r\n              expiresAt: res.data.expiresAt,\r\n            });\r\n            this.isLogged.set(true);\r\n            this.router.navigate(['/']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  signOut(): void {\r\n    const refreshToken = this.tokenService.getRefreshToken();\r\n    if (!refreshToken) {\r\n      return;\r\n    }\r\n\r\n    this.requestFactory\r\n      .post<\r\n        IBaseResponseWithoutData,\r\n        IRevokeTokenRequestDto\r\n      >(ApiEndpoints.REVOKE_TOKEN, { refreshToken: refreshToken.refreshToken })\r\n      .subscribe({\r\n        next: res => {\r\n          if (res.success) {\r\n            this.tokenService.removeTokens();\r\n            this.isLogged.set(false);\r\n            this.toastService.showSuccess('Account', 'You have been logged out!');\r\n            this.router.navigate([RouterEnum.login]);\r\n          }\r\n        },\r\n        error: error => {\r\n          console.log(error);\r\n        },\r\n      });\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  resetPassword() {}\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  changePassword() {}\r\n\r\n  isAuth(): boolean {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    const refreshToken = this.tokenService.getRefreshToken();\r\n\r\n    if (!accessToken || !refreshToken) {\r\n      return false;\r\n    }\r\n\r\n    const isRefreshTokenValid = this.tokenService.validateRefreshToken(refreshToken);\r\n\r\n    if (isRefreshTokenValid) {\r\n      return true;\r\n    }\r\n\r\n    this.tokenService.removeTokens();\r\n    return false;\r\n  }\r\n\r\n  getUserId() {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    if (accessToken !== null) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      return decodedToken ? decodedToken.sub : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getUserName() {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    if (accessToken !== null) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      return decodedToken ? decodedToken.unique_name : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  getUserEmail() {\r\n    const accessToken: IAccessToken | null = this.tokenService.getAccessToken();\r\n    if (accessToken !== null) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      return decodedToken ? decodedToken.email : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private initRoles(): void {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    if (this.isAuth() && accessToken) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      if (decodedToken && decodedToken.role) {\r\n        this.roleService.setRole(decodedToken.role);\r\n      } else {\r\n        this.roleService.setRole(null);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorService",
            "id": "injectable-ErrorService-110470b13b7c3d31e0ebb9f69fa3df36aac04d0ac56dba289028c3539b8b741820f20ffcf9da2cd9305b6121eb5298718c6a08351ff97ee4ebd39d58275afb8d",
            "file": "src/app/shared/services/error.service.ts",
            "properties": [
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorService {\n  private translateService = inject(TranslateService);\n\n  getErrorMessage(control: FormControl): string {\n    if (control.hasError('required')) {\n      return this.translateService.instant('ERRORS.REQUIRED');\n    }\n\n    if (\n      control.hasError('pattern') &&\n      control.errors?.['pattern']?.['requiredPattern'] === '/^\\\\d{2}-\\\\d{3}$/'\n    ) {\n      return this.translateService.instant('ERRORS.POSTAL_CODE_FORMAT');\n    }\n\n    if (control.hasError('minlength')) {\n      const minLength = control.errors?.['minlength']?.requiredLength;\n      return this.translateService.instant('ERRORS.MIN_LENGTH', { minLength });\n    }\n\n    if (control.hasError('maxlength')) {\n      const maxLength = control.errors?.['maxlength']?.requiredLength;\n      return this.translateService.instant('ERRORS.MAX_LENGTH', { maxLength });\n    }\n\n    if (control.hasError('email')) {\n      return this.translateService.instant('ERRORS.INVALID_EMAIL');\n    }\n\n    if (control.hasError('passwordsNotEqual')) {\n      return this.translateService.instant('ERRORS.PASSWORDS_NOT_EQUAL');\n    }\n\n    return '';\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ExampleCrudService",
            "id": "injectable-ExampleCrudService-25f6e958fd450817a64cb26c7bc172e61bed2a936a2c0ad610489ce16d45bd35510fd706bb8b83b7cd819549224560e764bec16a193683079c8307876b653cc7",
            "file": "src/app/core/_services/example-crud.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createKarmelek",
                    "args": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteKarmelek",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllKarmelki",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki[]>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKarmelekById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPagedKarmelki",
                    "args": [
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelkiResponse>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateKarmelek",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiEndpoints } from '../../enums/api-endpoints.enum';\nimport { IBaseResponse } from '../_models/base-response.model';\nimport { IKarmelki, IKarmelkiResponse } from '../_models/karmelki.model';\nimport { IPagedQueryParams } from '../_models/paged-query-params.model';\nimport { RequestFactoryService } from './httpRequestFactory/request-factory.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExampleCrudService {\n  constructor(private requestFactory: RequestFactoryService) {}\n\n  getAllKarmelki(): Observable<IBaseResponse<IKarmelki[]>> {\n    return this.requestFactory.getAll<IKarmelki[]>(ApiEndpoints.KARMELKI);\n  }\n\n  getPagedKarmelki(queryParams: IPagedQueryParams): Observable<IBaseResponse<IKarmelkiResponse>> {\n    return this.requestFactory.getPaged<IKarmelkiResponse>(ApiEndpoints.KARMELKI, queryParams);\n  }\n\n  getKarmelekById(id: string): Observable<IBaseResponse<IKarmelki>> {\n    return this.requestFactory.getById<IKarmelki>(ApiEndpoints.KARMELKI, id);\n  }\n\n  createKarmelek(karmelek: IKarmelki): Observable<IBaseResponse<IKarmelki>> {\n    return this.requestFactory.create<IKarmelki, IKarmelki>(ApiEndpoints.KARMELKI, karmelek);\n  }\n\n  updateKarmelek(id: string, karmelek: IKarmelki): Observable<IBaseResponse<IKarmelki>> {\n    return this.requestFactory.update<IKarmelki, IKarmelki>(ApiEndpoints.KARMELKI, id, karmelek);\n  }\n\n  deleteKarmelek(id: string): Observable<IBaseResponse<IKarmelki>> {\n    return this.requestFactory.delete<IKarmelki>(ApiEndpoints.KARMELKI, id);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "requestFactory",
                        "type": "RequestFactoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "requestFactory",
                        "type": "RequestFactoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FileService",
            "id": "injectable-FileService-0d558b52f4c5a43e88c1a710499ffbd5e5319a5d52fa60eacd1ca1334ad635ca0cdf82e82e6df41b54d210a3afe45d4b0d99744d85003d0de12609eeac663e82",
            "file": "src/app/core/_services/file/file.service.ts",
            "properties": [
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponseWithoutData>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponseWithoutData>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFile>>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImage",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageableFiles",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFileListResponseDto>>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFileStatsDto>>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendFile",
                    "args": [
                        {
                            "name": "fileData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFile>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\r\nimport { IBaseResponse, IBaseResponseWithoutData } from '../../_models/base-response.model';\r\nimport {\r\n  IFileEditRequestDto,\r\n  IFileListResponseDto,\r\n  IFileStatsDto,\r\n} from '../../_models/DTOs/fileDto.model';\r\nimport { IFile } from '../../_models/file.model';\r\nimport { IQueryParams } from '../../_models/query-params.model';\r\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FileService {\r\n  private requestFactory = inject(RequestFactoryService);\r\n\r\n  sendFile(fileData: FormData): Observable<IBaseResponse<IFile>> {\r\n    const options: IQueryParams = {\r\n      headers: new HttpHeaders(),\r\n    };\r\n\r\n    return this.requestFactory.create<IFile, FormData>(ApiEndpoints.SEND_FILE, fileData, options);\r\n  }\r\n\r\n  downloadFile(fileId: string): void {\r\n    this.requestFactory.getBlobById(ApiEndpoints.DOWNLOAD_FILE, fileId).subscribe({\r\n      next: res => {\r\n        const header = res.headers.get('Content-Disposition');\r\n        const fileName = header?.match(/filename\\*?=(?:UTF-8''|\")?([^\";]+)/)?.[1];\r\n        if (!fileName || !res.body) return;\r\n\r\n        const url = URL.createObjectURL(res.body);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = fileName;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n      },\r\n      error: error => {\r\n        console.error('Failed to download file');\r\n        console.error(error);\r\n      },\r\n    });\r\n  }\r\n\r\n  getImage(fileId: string): Observable<string> {\r\n    return this.requestFactory\r\n      .getBlobById(ApiEndpoints.DOWNLOAD_FILE, fileId)\r\n      .pipe(map(res => URL.createObjectURL(res.body as Blob)));\r\n  }\r\n\r\n  getFile(fileId: string): Observable<IBaseResponse<IFile>> {\r\n    return this.requestFactory.getById<IFile>(ApiEndpoints.GET_FILE, fileId);\r\n  }\r\n\r\n  getPageableFiles(\r\n    pageNumber: number,\r\n    pageSize: number\r\n  ): Observable<IBaseResponse<IFileListResponseDto>> {\r\n    return this.requestFactory.getPaged<IFileListResponseDto>(ApiEndpoints.GET_FILES_LIST, {\r\n      pageNumber,\r\n      pageSize,\r\n    });\r\n  }\r\n\r\n  editFile(fileId: string, fileName: string): Observable<IBaseResponseWithoutData> {\r\n    return this.requestFactory.update<IBaseResponseWithoutData, IFileEditRequestDto>(\r\n      ApiEndpoints.EDIT_FILE,\r\n      fileId,\r\n      { fileName }\r\n    );\r\n  }\r\n\r\n  deleteFile(fileId: string): Observable<IBaseResponseWithoutData> {\r\n    return this.requestFactory.delete<IBaseResponseWithoutData>(ApiEndpoints.DELETE_FILE, fileId);\r\n  }\r\n\r\n  getStats(): Observable<IBaseResponse<IFileStatsDto>> {\r\n    return this.requestFactory.get<IFileStatsDto>(ApiEndpoints.GET_FILES_STATS);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FormService",
            "id": "injectable-FormService-d1fb86707e516020d1a81ae2e7cf86848e3419fd4c8aa97ccc6110a0073dd3a72ed41c8881ba53d34adeaa9c47792e2b7c3262f5ba5ab808d831b222004ddb87",
            "file": "src/app/shared/services/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getExampleCrudForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<ExampleCrudForm>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<LoginForm>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPasswdRecoveryForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<PasswdRecoveryForm>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPasswordsForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<PasswordsForm>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<RegisterForm>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getThemeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<ThemeForm>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  ExampleCrudForm,\n  LoginForm,\n  PasswdRecoveryForm,\n  PasswordsForm,\n  RegisterForm,\n  ThemeForm,\n} from '../models/form.model';\nimport { initLoginForm } from './forms/initLoginForm';\nimport { initPasswdRecoveryForm } from './forms/initPasswdRecoveryForm';\nimport { initPasswordsForm } from './forms/initPasswordsForm';\nimport { initRegisterForm } from './forms/initRegisterForm';\nimport { initThemeForm } from './forms/initThemeForm';\nimport { initExampleCrudForm } from './forms/initExampleCrudForm';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormService {\n  public getPasswordsForm(): FormGroup<PasswordsForm> {\n    return initPasswordsForm();\n  }\n\n  public getLoginForm(): FormGroup<LoginForm> {\n    return initLoginForm();\n  }\n\n  public getRegisterForm(): FormGroup<RegisterForm> {\n    return initRegisterForm();\n  }\n\n  public getThemeForm(): FormGroup<ThemeForm> {\n    return initThemeForm();\n  }\n\n  public getPasswdRecoveryForm(): FormGroup<PasswdRecoveryForm> {\n    return initPasswdRecoveryForm();\n  }\n\n  public getExampleCrudForm(): FormGroup<ExampleCrudForm> {\n    return initExampleCrudForm();\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-8890eb80b28c11ff38f38bc05871523280979261cfd6c649705705dd761869bbad528dc3ea4f2045dd584fc4ba53811e0d49e77f2b7539635920a1ff909da02f",
            "file": "src/app/core/_services/language/language.service.ts",
            "properties": [
                {
                    "name": "currentLangSubject",
                    "defaultValue": "new BehaviorSubject<string>(LanguageCode.POLISH)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "DEFAULT_LANG",
                    "defaultValue": "LanguageCode.POLISH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languages",
                    "defaultValue": "MenuConfig.langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILanguage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "determineInitialLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLanguageSupported",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { MenuConfig } from '../../../config/menu.config';\nimport { LanguageCode } from '../../../enums/LanguageCode.enum';\nimport { ILanguage } from '../../_models/language.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LanguageService {\n  private currentLangSubject = new BehaviorSubject<string>(LanguageCode.POLISH);\n  private DEFAULT_LANG = LanguageCode.POLISH;\n  private translateService = inject(TranslateService);\n\n  languages: ILanguage[] = MenuConfig.langs;\n\n  constructor() {\n    const langToUse = this.determineInitialLanguage();\n    this.initializeLanguage(langToUse);\n  }\n\n  get currentLang$(): Observable<string> {\n    return this.currentLangSubject.asObservable();\n  }\n\n  get currentLang(): string {\n    return this.currentLangSubject.value;\n  }\n\n  initLanguage(): void {\n    const langToUse = this.determineInitialLanguage();\n    this.initializeLanguage(langToUse);\n  }\n\n  changeLanguage(lang: string): void {\n    if (this.isLanguageSupported(lang)) {\n      this.initializeLanguage(lang);\n    }\n  }\n\n  private initializeLanguage(lang: string): void {\n    this.currentLangSubject.next(lang);\n    this.translateService.setDefaultLang(this.DEFAULT_LANG);\n    this.translateService.use(lang);\n    localStorage.setItem('selectedLanguage', lang);\n  }\n\n  private isLanguageSupported(lang: string): boolean {\n    return this.languages.some(language => language.value === lang);\n  }\n\n  private determineInitialLanguage(): string {\n    const browserLang = this.translateService.getBrowserLang();\n    const savedLang = localStorage.getItem('selectedLanguage');\n\n    if (savedLang && this.isLanguageSupported(savedLang)) {\n      return savedLang;\n    }\n\n    if (browserLang && this.isLanguageSupported(browserLang)) {\n      return browserLang;\n    }\n\n    return this.DEFAULT_LANG;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "accessors": {
                "currentLang$": {
                    "name": "currentLang$",
                    "getSignature": {
                        "name": "currentLang$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 23
                    }
                },
                "currentLang": {
                    "name": "currentLang",
                    "getSignature": {
                        "name": "currentLang",
                        "type": "string",
                        "returnType": "string",
                        "line": 27
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RequestFactoryService",
            "id": "injectable-RequestFactoryService-ccd4cd6d13feb2757a3ffd98ffdeaf51e3df950401dbcefad6f2e359985b21b8aeb3a3d91f9209c242986091416da7b88a47ff8769df63293f462f3711152dab",
            "file": "src/app/core/_services/httpRequestFactory/request-factory.service.ts",
            "properties": [
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBlobById",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<Blob>>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDefaultParams",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "request",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment.development';\r\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\r\nimport { IBaseResponse } from '../../_models/base-response.model';\r\nimport { IPagedQueryParams } from '../../_models/paged-query-params.model';\r\nimport { IQueryParams } from '../../_models/query-params.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RequestFactoryService {\r\n  private http = inject(HttpClient);\r\n\r\n  get<T>(endpoint: ApiEndpoints, options?: IQueryParams): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', endpoint, null, options);\r\n  }\r\n\r\n  post<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('POST', endpoint, body, options);\r\n  }\r\n\r\n  getAll<T>(endpoint: ApiEndpoints, options?: IQueryParams): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', endpoint, null, options);\r\n  }\r\n\r\n  getById<T>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', `${endpoint}/${id}`, null, options);\r\n  }\r\n\r\n  getBlobById(endpoint: ApiEndpoints, id: string): Observable<HttpResponse<Blob>> {\r\n    return this.http.get(`${environment.apiURL}/${endpoint}/${id}`, {\r\n      responseType: 'blob',\r\n      observe: 'response',\r\n    });\r\n  }\r\n\r\n  getPaged<T>(\r\n    endpoint: ApiEndpoints,\r\n    queryParams: IPagedQueryParams,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    const pageNumber = queryParams.pageNumber > 0 ? queryParams.pageNumber : 1;\r\n    const pageSize = queryParams.pageSize > 0 ? queryParams.pageSize : 10;\r\n\r\n    let params = options?.params ? options.params : this.getDefaultParams();\r\n    params = params.set('pageNumber', pageNumber.toString()).set('pageSize', pageSize.toString());\r\n\r\n    if (queryParams.filter) {\r\n      params = params.set('filter', queryParams.filter);\r\n    }\r\n\r\n    if (queryParams.sortBy) {\r\n      params = params.set('sortBy', queryParams.sortBy);\r\n    }\r\n\r\n    if (queryParams.sortDescending) {\r\n      params = params.set('sortDescending', queryParams.sortDescending.toString());\r\n    }\r\n\r\n    if (queryParams.includeInactive) {\r\n      params = params.set('includeInactive', queryParams.includeInactive.toString());\r\n    }\r\n\r\n    return this.request<T>('GET', endpoint, null, { params });\r\n  }\r\n\r\n  create<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('POST', endpoint, body, options);\r\n  }\r\n\r\n  update<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('PUT', `${endpoint}/${id}`, body, options);\r\n  }\r\n\r\n  patch<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('PATCH', `${endpoint}/${id}`, body, options);\r\n  }\r\n\r\n  delete<T>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, { isDeleted: number }>(\r\n      'PATCH',\r\n      `${endpoint}/${id}`,\r\n      { isDeleted: 1 },\r\n      options\r\n    );\r\n  }\r\n\r\n  private getDefaultHeaders(): HttpHeaders {\r\n    return new HttpHeaders({ 'Content-Type': 'application/json' });\r\n  }\r\n\r\n  private getDefaultParams(): HttpParams {\r\n    return new HttpParams();\r\n  }\r\n\r\n  private request<T, B = undefined>(\r\n    method: string,\r\n    endpoint: ApiEndpoints | string,\r\n    body?: B | null | undefined,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    const headers = options?.headers ? options.headers : this.getDefaultHeaders();\r\n    const params = options?.params ? options.params : this.getDefaultParams();\r\n\r\n    const configuration = {\r\n      headers,\r\n      params,\r\n      body,\r\n    };\r\n\r\n    return this.http.request<IBaseResponse<T>>(\r\n      method,\r\n      `${environment.apiURL}/${endpoint}`,\r\n      configuration\r\n    );\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RoleService",
            "id": "injectable-RoleService-5044bed2ae7b14c276c2d3d5196386b922aaad3b9f5ba93163e9e184bb7b2b7a909558aa41429b7c00ba5d4ce1eb9b3a8e6418ab3a10869e5e3553c996da6f92",
            "file": "src/app/core/_services/role/role.service.ts",
            "properties": [
                {
                    "name": "role",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "isAuthorized",
                    "args": [
                        {
                            "name": "roles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRole",
                    "args": [
                        {
                            "name": "roles",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoleService {\n  role = signal<string | null>(null);\n\n  setRole(roles: string | null): void {\n    this.role.set(roles);\n  }\n\n  isAuthorized(roles: string[]): boolean {\n    if (roles === null) {\n      return false;\n    }\n\n    const currentRole = this.role();\n    return currentRole !== null && roles.includes(currentRole);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-ce2ea3ae4f70fd0397e458b3b0b9d1f40c269db665305728a0ef1689b104f832dee54a678b429ffa64f47772a147db82bdd4a82bac8a258e11ff61192a074128",
            "file": "src/app/shared/services/toast.service.ts",
            "properties": [
                {
                    "name": "messageService",
                    "defaultValue": "inject(MessageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "severity",
                            "type": "ISeverity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "severity",
                            "type": "ISeverity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showInfo",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWarning",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport type { IKeys, ISeverity } from '../types/toast.types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastService {\n  messageService = inject(MessageService);\n\n  show(severity: ISeverity, summary: string, detail: string, key?: IKeys, life?: number) {\n    this.messageService.add({\n      severity,\n      summary,\n      detail,\n      key,\n      life,\n    });\n  }\n\n  showSuccess(summary: string, detail: string, key?: IKeys, life?: number) {\n    this.show('success', summary, detail, key, life);\n  }\n\n  showInfo(summary: string, detail: string, key?: IKeys, life?: number) {\n    this.show('info', summary, detail, key, life);\n  }\n\n  showWarning(summary: string, detail: string, key?: IKeys, life?: number) {\n    this.show('warn', summary, detail, key, life);\n  }\n\n  showError(summary: string, detail: string, key?: IKeys, life?: number) {\n    this.show('error', summary, detail, key, life);\n  }\n\n  clear(key?: string) {\n    this.messageService.clear(key);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TokenService",
            "id": "injectable-TokenService-9ec617061ec7c7901b49d2a25867f080a7dee71de66a9996db5a3b9e78e3ab041617cb00042b7903f0f10238eaed7ad6d67d5fe48cbbcde41da5efb282bdfd62",
            "file": "src/app/core/_services/token/token.service.ts",
            "properties": [
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "decodeToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDecodedToken | null",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "IAccessToken | null",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "IRefreshToken | null",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "tokens",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAuthTokensResponseDto>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tokens",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTokens",
                    "args": [
                        {
                            "name": "accessToken",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accessToken",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateRefreshToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "IAccessToken | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "IAccessToken | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { jwtDecode } from 'jwt-decode';\nimport { map, Observable } from 'rxjs';\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\nimport { IBaseResponse } from '../../_models/base-response.model';\nimport { IDecodedToken } from '../../_models/decoded-token.model';\nimport { IAccessToken, IRefreshToken, ITokens } from '../../_models/tokens.model';\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\nimport {\n  IAuthRefreshTokensRequestDto,\n  IAuthTokensResponseDto,\n} from '../../_models/DTOs/authDto.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TokenService {\n  private requestFactory = inject(RequestFactoryService);\n\n  refreshToken(tokens: ITokens): Observable<IAuthTokensResponseDto> {\n    const body: IAuthRefreshTokensRequestDto = {\n      accessToken: tokens.accessToken,\n      refreshToken: tokens.refreshToken.refreshToken,\n    };\n    return this.requestFactory\n      .post<IAuthTokensResponseDto, IAuthRefreshTokensRequestDto>(ApiEndpoints.REFRESH_TOKEN, body)\n      .pipe(map((response: IBaseResponse<IAuthTokensResponseDto>) => response.data));\n  }\n\n  decodeToken(token: IAccessToken): IDecodedToken | null {\n    if (token !== null) {\n      return jwtDecode<IDecodedToken>(token);\n    } else {\n      return null;\n    }\n  }\n\n  getAccessToken(): IAccessToken | null {\n    const accessToken = localStorage.getItem('accessToken');\n    return accessToken;\n  }\n\n  getRefreshToken(): IRefreshToken | null {\n    const refreshToken = localStorage.getItem('refreshToken');\n    const refreshTokenExpiresAt = localStorage.getItem('refreshTokenExpiresAt');\n\n    if (refreshToken === null || refreshTokenExpiresAt === null) {\n      return null;\n    }\n\n    const token: IRefreshToken = {\n      refreshToken: refreshToken,\n      expiresAt: refreshTokenExpiresAt,\n    };\n\n    return token;\n  }\n\n  setTokens(accessToken: IAccessToken, refreshToken: IRefreshToken): void {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken.refreshToken);\n    localStorage.setItem('refreshTokenExpiresAt', refreshToken.expiresAt);\n  }\n\n  removeTokens(): void {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('refreshTokenExpiresAt');\n  }\n\n  validateToken(token: IAccessToken | null): boolean {\n    if (token === null) {\n      return false;\n    }\n\n    const decodedToken = this.decodeToken(token);\n    try {\n      if (decodedToken !== null) {\n        return decodedToken.exp * 1000 > Date.now();\n      } else {\n        return false;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (error) {\n      return false;\n    }\n  }\n\n  validateRefreshToken(refreshToken: IRefreshToken | null): boolean {\n    if (refreshToken === null) {\n      return false;\n    }\n\n    const expiresAt = new Date(refreshToken.expiresAt);\n    const currentDate = new Date();\n\n    if (refreshToken !== null) {\n      return expiresAt > currentDate;\n    } else {\n      return false;\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "HasRoleDirective",
            "id": "directive-HasRoleDirective-2540cc73d8339f5316c65d9675545013a4f35161d4294078710c646f78ee3b4e7d0e9433b3810dc783a27811c61c676eb3a0572d1206b1fbe364b7f44a3c1bba",
            "file": "src/app/shared/directives/has-role.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  effect,\n  inject,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n  untracked,\n} from '@angular/core';\nimport { RoleService } from '../../core/_services/role/role.service';\n\n@Directive({\n  selector: '[hasRole]',\n  standalone: true,\n})\nexport class HasRoleDirective {\n  private templateRef = inject(TemplateRef);\n  private viewContainer = inject(ViewContainerRef);\n  private roleService = inject(RoleService);\n\n  private requiredRoles: string[] | undefined;\n\n  @Input()\n  set hasRole(roles: string[]) {\n    this.requiredRoles = roles;\n    this.updateView();\n  }\n\n  constructor() {\n    effect(() => {\n      const currentRole = untracked(() => this.requiredRoles);\n      if (currentRole) {\n        this.updateView();\n      }\n    });\n  }\n\n  private updateView(): void {\n    if (!this.requiredRoles) {\n      this.viewContainer.clear();\n      return;\n    }\n\n    const hasAccess = this.roleService.isAuthorized(this.requiredRoles);\n\n    if (hasAccess && this.viewContainer.length === 0) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else if (!hasAccess) {\n      this.viewContainer.clear();\n    }\n  }\n}\n",
            "selector": "[hasRole]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "hasRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "requiredRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roleService",
                    "defaultValue": "inject(RoleService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateRef",
                    "defaultValue": "inject(TemplateRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainer",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "accessors": {
                "hasRole": {
                    "name": "hasRole",
                    "setSignature": {
                        "name": "hasRole",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "roles",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "roles",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "IsLoggedInDirective",
            "id": "directive-IsLoggedInDirective-b2413a3c695fedccb204dd1d79d463579d9ca73958a213b003ef6cb7cb0efc25111f1148c61cc701aaf3189e305542ac7540c2e483e54bfc75c2a7fe754ec7f0",
            "file": "src/app/shared/directives/is-logged-in.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, effect, inject, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { AuthService } from '../../core/_services/auth/auth.service';\n\n@Directive({\n  selector: '[isLoggedIn]',\n  standalone: true,\n})\nexport class IsLoggedInDirective {\n  private templateRef = inject(TemplateRef);\n  private viewContainer = inject(ViewContainerRef);\n  private authService = inject(AuthService);\n\n  constructor() {\n    effect(() => {\n      const isLogged = this.authService.isLogged();\n      this.viewContainer.clear();\n      if (isLogged) {\n        this.viewContainer.createEmbeddedView(this.templateRef);\n      }\n    });\n  }\n}\n",
            "selector": "[isLoggedIn]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateRef",
                    "defaultValue": "inject(TemplateRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainer",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            }
        },
        {
            "name": "NotLoggedInDirective",
            "id": "directive-NotLoggedInDirective-85b7afd1c225e6684eaeaa0fccf62f0b2bcc43e5a79b5f59e4619f4582e21742b0add1aef71ff60b9345e188b8b9558c4b0438543357b6f79e30a036cc73bf47",
            "file": "src/app/shared/directives/not-logged-in.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, effect, inject, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { AuthService } from '../../core/_services/auth/auth.service';\n\n@Directive({\n  selector: '[notLoggedIn]',\n  standalone: true,\n})\nexport class NotLoggedInDirective {\n  private templateRef = inject(TemplateRef);\n  private viewContainer = inject(ViewContainerRef);\n  private authService = inject(AuthService);\n\n  constructor() {\n    effect(() => {\n      const isLogged = this.authService.isLogged();\n      this.viewContainer.clear();\n      if (!isLogged) {\n        this.viewContainer.createEmbeddedView(this.templateRef);\n      }\n    });\n  }\n}\n",
            "selector": "[notLoggedIn]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateRef",
                    "defaultValue": "inject(TemplateRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainer",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            }
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-1ef6118873c47e9b66964f45ba32d59b581ac698fd63d46212941e962d66597def301edfcb90ac7bc45f9b98364753fb57b6edf38fcd0021ca2fc0790cfc017a",
            "file": "src/app/shared/components/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-accordion",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activeItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "allowMultiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "panels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "IAccordionPanelItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AccordionModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { AccordionModule } from 'primeng/accordion';\nimport { IAccordionPanelItem, IAccordionProps } from '../../types/accordion.type';\n\n@Component({\n  selector: 'app-accordion',\n  standalone: true,\n  imports: [AccordionModule, CommonModule],\n  templateUrl: './accordion.component.html',\n  styleUrl: './accordion.component.scss',\n})\nexport class AccordionComponent implements IAccordionProps {\n  @Input() panels: IAccordionPanelItem[] = [];\n  @Input() activeItems: string[] = [];\n  @Input() allowMultiple = true;\n}\n",
            "styleUrl": "./accordion.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IAccordionProps"
            ],
            "templateData": "<div class=\"card flex justify-content-center\">\n  <p-accordion [value]=\"activeItems\" [multiple]=\"allowMultiple\">\n    <ng-container *ngFor=\"let panel of panels\">\n      <p-accordion-panel [value]=\"panel.value\">\n        <p-accordion-header>{{ panel.header }}</p-accordion-header>\n        <p-accordion-content>\n          <ng-container *ngTemplateOutlet=\"panel.contentTemplate\"></ng-container>\n        </p-accordion-content>\n      </p-accordion-panel>\n    </ng-container>\n  </p-accordion>\n</div>\n"
        },
        {
            "name": "AltchaComponent",
            "id": "component-AltchaComponent-3cef14e5ff5f8817c53e1e269528b7b30c6a4c52837844b42e3c7ad798f5a658fd55c7d6b072b1447c7d8b2cfad2fdfa64d6a599b3fd71200d49ca435f252024",
            "file": "src/app/shared/components/altcha/altcha.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AltchaComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => AltchaComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-altcha",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./altcha.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "challengeurl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{ '--altcha-max-width': '320px' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "test",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altchaWidget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'altchaWidget', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onStateChange",
                    "args": [
                        {
                            "name": "state",
                            "type": "\"unverified\" | \"verifying\" | \"verified\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "\"unverified\" | \"verifying\" | \"verified\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "status",
                                    "type": "IAltchaStatus",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "status",
                                    "type": "IAltchaStatus",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  CUSTOM_ELEMENTS_SCHEMA,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  ViewChild,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  AbstractControl,\r\n  ValidationErrors,\r\n} from '@angular/forms';\r\nimport { IAltchaStatus } from '../../models/altcha.model';\r\nimport 'altcha';\r\nimport { IAltchaProps } from '../../types/altcha.types';\r\n\r\n@Component({\r\n  selector: 'app-altcha',\r\n  standalone: true,\r\n  imports: [],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  templateUrl: './altcha.component.html',\r\n  styleUrl: './altcha.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AltchaComponent),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => AltchaComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class AltchaComponent implements ControlValueAccessor, Validator, IAltchaProps {\r\n  @ViewChild('altchaWidget', { static: true }) altchaWidget!: ElementRef;\r\n  @Input() challengeurl = '';\r\n  @Input() debug = false;\r\n  @Input() test = false;\r\n  @Input() value = '';\r\n  @Input() style?: Record<string, string> = { '--altcha-max-width': '320px' };\r\n  @Input() styleClass?: string;\r\n\r\n  onChange = (status: IAltchaStatus): void => {\r\n    if (this.debug) {\r\n      console.log('Altcha status changed!', status);\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouched = (): void => {};\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.altchaWidget.nativeElement as HTMLElement;\r\n    el.addEventListener('statechange', ev => {\r\n      const { detail } = ev as CustomEvent;\r\n      if (detail) {\r\n        const { payload, state } = detail;\r\n        this.onStateChange(state, payload);\r\n      }\r\n    });\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: (status: IAltchaStatus) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.value) {\r\n      return { required: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onStateChange(state: 'unverified' | 'verifying' | 'verified' | 'error', payload = '') {\r\n    this.value = state === 'verified' ? payload : '';\r\n    const statusObject: IAltchaStatus = { state, payload };\r\n    this.onChange(statusObject);\r\n    this.onTouched();\r\n  }\r\n}\r\n",
            "styleUrl": "./altcha.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "IAltchaProps"
            ],
            "templateData": "<altcha-widget\n  #altchaWidget\n  [challengeurl]=\"challengeurl\"\n  [debug]=\"debug\"\n  [test]=\"test\"\n  [style]=\"style\"\n  [styleClass]=\"styleClass\"\n></altcha-widget>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-666f3674ef00e0def3ca4f33ea8512926cb0f1a70cb85cd89b8b26fa4cf4da7c373355ae2ff43150930ab79b0460562d86c308a3f28e581dbb3d9280be1dec7e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authMenuItems",
                    "defaultValue": "MenuConfig.authMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "footerTitle",
                    "defaultValue": "MenuConfig.footerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "langs",
                    "defaultValue": "MenuConfig.langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "languageService",
                    "defaultValue": "inject(LanguageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nonAuthMenuItems",
                    "defaultValue": "MenuConfig.nonAuthMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "title",
                    "defaultValue": "MenuConfig.title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ToastModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ToastModule } from 'primeng/toast';\nimport { MenuConfig } from './config/menu.config';\nimport { LanguageService } from './core/_services/language/language.service';\nimport { FooterComponent } from './shared/components/footer/footer.component';\nimport { NavbarComponent } from './shared/components/navbar/navbar.component';\nimport { AuthService } from './core/_services/auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, NavbarComponent, FooterComponent, TranslateModule, ToastModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent implements OnInit {\n  title = MenuConfig.title;\n  langs = MenuConfig.langs;\n  authMenuItems = MenuConfig.authMenuItems;\n  nonAuthMenuItems = MenuConfig.nonAuthMenuItems;\n  footerTitle = MenuConfig.footerTitle;\n\n  protected authService = inject(AuthService);\n\n  private languageService = inject(LanguageService);\n\n  ngOnInit() {\n    this.languageService.initLanguage();\n  }\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-navbar\n  [title]=\"title\"\n  [showSwitchTheme]=\"true\"\n  [showSwitchLang]=\"true\"\n  [langs]=\"langs\"\n  [authMenuItems]=\"authMenuItems\"\n  [nonAuthMenuItems]=\"nonAuthMenuItems\"\n  [isAuthenticated]=\"this.authService.isLogged()\"\n>\n</app-navbar>\n<main class=\"main-container\">\n  <p-toast></p-toast>\n  <router-outlet></router-outlet>\n</main>\n<app-footer [title]=\"footerTitle\"> </app-footer>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-eefc13abaffe8f45bbec635d8eec89eb57231476ad92709dcf435fcaef893eb3896da7884c662e7cc09526c3dbd6ca80a7ad6a4d9820c02ca064ba21db012345",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 774,
                            "end": 787,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 775,
                                "end": 783,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n.storybook-button--primary {\r\n  background-color: #555ab9;\r\n  color: white;\r\n}\r\n.storybook-button--secondary {\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #333;\r\n}\r\n.storybook-button--small {\r\n  padding: 10px 16px;\r\n  font-size: 12px;\r\n}\r\n.storybook-button--medium {\r\n  padding: 11px 20px;\r\n  font-size: 14px;\r\n}\r\n.storybook-button--large {\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-25ecfe1b92b46f377c5ffc5075b3491372054a78af3914f8aa61feeb8585632d6a18d7026edff502926862e6713407a005a5811787e1c8d8aaa7c399f7068fe5-1",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badgeSeverity",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IButtonBadgeSeverity",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPos",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IButtonIconPosition",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "outlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "raised",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IButtonSeverity",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "IButtonSize",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  IButtonIconPosition,\n  IButtonBadgeSeverity,\n  IButtonSeverity,\n  IButtonVariant,\n  IButtonSize,\n  IButtonProps,\n} from '../../types/button.types';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [CommonModule, ButtonModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent implements IButtonProps {\n  @Input() label?: string;\n  @Input() icon?: string;\n  @Input() iconPos: IButtonIconPosition = 'left';\n  @Input() badge?: string;\n  @Input() badgeSeverity: IButtonBadgeSeverity = 'info';\n  @Input() severity: IButtonSeverity = 'primary';\n  @Input() raised = false;\n  @Input() rounded = false;\n  @Input() loading = false;\n  @Input() disabled = false;\n  @Input() variant?: IButtonVariant;\n  @Input() outlined = false;\n  @Input() size?: IButtonSize;\n  @Input() styleClass?: string;\n  @Input() ariaLabel?: string;\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\n\n  @Output() onClick = new EventEmitter<MouseEvent>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "IButtonProps"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<p-button\n  [label]=\"label\"\n  [icon]=\"icon\"\n  [iconPos]=\"iconPos\"\n  [loading]=\"loading\"\n  [severity]=\"severity\"\n  [badgeSeverity]=\"badgeSeverity\"\n  [raised]=\"raised\"\n  [rounded]=\"rounded\"\n  [variant]=\"variant\"\n  [outlined]=\"outlined\"\n  [badge]=\"badge\"\n  [disabled]=\"disabled\"\n  [size]=\"size\"\n  [styleClass]=\"styleClass\"\n  [ariaLabel]=\"ariaLabel\"\n  (onClick)=\"onClick.emit($event)\"\n  [type]=\"type\"\n/>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-447fb0d034ef43a7170eb30ffcf31bae32dca7785e8a755dcef3e82f7cda182ab3683032e201af28ede843a36ac8e3d0baa28956a65192c43fa9c8725eb2956c",
            "file": "src/app/shared/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouchedFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, forwardRef, Input } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { ICheckboxProps } from '../../types/checkbox.types';\n\n@Component({\n  selector: 'app-checkbox',\n  standalone: true,\n  imports: [CommonModule, CheckboxModule, FormsModule, ReactiveFormsModule],\n  templateUrl: './checkbox.component.html',\n  styleUrl: './checkbox.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CheckboxComponent),\n      multi: true,\n    },\n  ],\n})\nexport class CheckboxComponent implements ICheckboxProps, ControlValueAccessor {\n  @Input() inputId?: string;\n  @Input() name?: string;\n  @Input() required = false;\n  @Input() label?: string;\n  @Input() formControl!: FormControl;\n  @Input() value?: boolean;\n  @Input() errorMessage?: string;\n  @Input() invalid?: boolean;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange: (value: boolean) => void = () => {};\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouchedFn: () => void = () => {};\n\n  checked = false;\n  touched = false;\n\n  writeValue(value: boolean): void {\n    this.checked = value;\n  }\n\n  registerOnChange(fn: (value: boolean) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouchedFn = fn;\n  }\n\n  onTouched(): void {\n    this.touched = true;\n    this.onTouchedFn();\n  }\n}\n",
            "styleUrl": "./checkbox.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ICheckboxProps",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"field\">\n  <p-checkbox\n    [inputId]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [(ngModel)]=\"checked\"\n    [required]=\"required\"\n    [formControl]=\"formControl\"\n    >></p-checkbox\n  >\n  @if (label) {\n    <label [class.required]=\"required\" [for]=\"inputId\" class=\"ml-2\"> {{ label }} </label>\n    @if (required) {\n      <span class=\"required-marker\">*</span>\n    }\n  }\n  @if (invalid && errorMessage && touched) {\n    <small class=\"p-error\">{{ errorMessage }}</small>\n  }\n</div>\n"
        },
        {
            "name": "ConfirmModalComponent",
            "id": "component-ConfirmModalComponent-a627757ee87aa5f5a4de86c5506cf49f6da7d161592c8a668fb580bf4976956d439de05790d4fd5192bac9cf69764f03adb165390e2936a09a43c4c04413fce6",
            "file": "src/app/shared/components/confirm-modal/confirm-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "'Confirm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "'Are you sure?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noLabel",
                    "defaultValue": "'No'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "yesLabel",
                    "defaultValue": "'Yes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "no",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "yes",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onNo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onYes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DialogModule } from 'primeng/dialog';\nimport { IConfirmModalProps } from '../../types/modal.types';\nimport { ButtonModule } from 'primeng/button';\nimport { ButtonComponent } from '../button/button.component';\n\n@Component({\n  selector: 'app-confirm-modal',\n  standalone: true,\n  imports: [DialogModule, CommonModule, ButtonModule, ButtonComponent],\n  templateUrl: './confirm-modal.component.html',\n  styleUrl: './confirm-modal.component.scss',\n})\nexport class ConfirmModalComponent implements IConfirmModalProps {\n  @Input() header = 'Confirm';\n  @Input() visible = false;\n  @Input() message = 'Are you sure?';\n  @Input() yesLabel = 'Yes';\n  @Input() noLabel = 'No';\n  @Output() yes = new EventEmitter<void>();\n  @Output() no = new EventEmitter<void>();\n\n  onYes() {\n    this.yes.emit();\n    this.visible = false;\n  }\n\n  onNo() {\n    this.no.emit();\n    this.visible = false;\n  }\n}\n",
            "styleUrl": "./confirm-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IConfirmModalProps"
            ],
            "templateData": "<p-dialog [header]=\"header\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '20rem' }\">\n  <span class=\"p-text-secondary block mb-4\">{{ message }}</span>\n  <div class=\"flex justify-end gap-2\">\n    <app-button\n      label=\"{{ noLabel }}\"\n      [severity]=\"'danger'\"\n      type=\"button\"\n      (click)=\"onNo()\"\n    ></app-button>\n    <app-button\n      label=\"{{ yesLabel }}\"\n      [severity]=\"'success'\"\n      type=\"button\"\n      (click)=\"onYes()\"\n    ></app-button>\n  </div>\n</p-dialog>\n"
        },
        {
            "name": "ContextMenuComponent",
            "id": "component-ContextMenuComponent-6fece651c0601111183510dbbffbce4ef0b8825e02c0e3dd63366a1c0fd706c1064f7403e27383373e586decdc2a3d27b7d25a5f74aa1e1398b9b37af011cb56",
            "file": "src/app/shared/components/context-menu/context-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-context-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./context-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "defaultValue": "'body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string | HTMLElement",
                    "decorators": []
                },
                {
                    "name": "autoZIndex",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseZIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "global",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "triggerEvent",
                    "defaultValue": "'contextmenu'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "onItemSelect",
                    "defaultValue": "new EventEmitter<IContextMenuEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContextMenu",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleItemSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "IContextMenuEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IContextMenuEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTarget",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ContextMenu"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MenuItem } from 'primeng/api';\nimport { ContextMenu } from 'primeng/contextmenu';\nimport { IContextMenuProps, IContextMenuEvent } from '../../types/context-menu.types';\n\n@Component({\n  selector: 'app-context-menu',\n  standalone: true,\n  imports: [CommonModule, ContextMenu],\n  templateUrl: './context-menu.component.html',\n})\nexport class ContextMenuComponent implements IContextMenuProps {\n  @Input() items: MenuItem[] = [];\n  @Input() global = false;\n  @Input() appendTo: string | HTMLElement = 'body';\n  @Input() autoZIndex = true;\n  @Input() baseZIndex = 0;\n  @Input() styleClass = '';\n  @Input() style: Record<string, string> = {};\n  @Input() triggerEvent = 'contextmenu';\n\n  @Output() onShow = new EventEmitter<void>();\n  @Output() onHide = new EventEmitter<void>();\n  @Output() onItemSelect = new EventEmitter<IContextMenuEvent>();\n\n  @ViewChild('cm') contextMenu!: ContextMenu;\n\n  show(event: MouseEvent): void {\n    if (this.contextMenu) {\n      this.contextMenu.show(event);\n    }\n  }\n\n  hide(): void {\n    if (this.contextMenu) {\n      this.contextMenu.hide();\n    }\n  }\n\n  setTarget(target: HTMLElement): void {\n    if (this.contextMenu) {\n      this.contextMenu.target = target;\n    }\n  }\n\n  onContextMenu(event: MouseEvent): void {\n    this.show(event);\n    event.preventDefault();\n  }\n\n  handleShow(): void {\n    this.onShow.emit();\n  }\n\n  handleHide(): void {\n    this.onHide.emit();\n  }\n\n  handleItemSelect(event: IContextMenuEvent): void {\n    this.onItemSelect.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IContextMenuProps"
            ],
            "templateData": "<p-contextMenu\n  #cm\n  [global]=\"global\"\n  [appendTo]=\"appendTo\"\n  [autoZIndex]=\"autoZIndex\"\n  [baseZIndex]=\"baseZIndex\"\n  [styleClass]=\"styleClass\"\n  [style]=\"style\"\n  [triggerEvent]=\"triggerEvent\"\n  [model]=\"items\"\n  (onShow)=\"handleShow()\"\n  (onHide)=\"handleHide()\"\n>\n</p-contextMenu>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-459eafff8b4ae077015eea61174b0c2076e21a659a46e12aa5681e5de2acab9124350b509d1206227433f971db1e076ef561f75a5d6ba702977278b82056e4f1",
            "file": "src/app/features/dashboard/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rolesEnum",
                    "defaultValue": "RolesEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "HasRoleDirective",
                    "type": "directive"
                },
                {
                    "name": "IsLoggedInDirective",
                    "type": "directive"
                },
                {
                    "name": "NotLoggedInDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { HasRoleDirective } from '../../../shared/directives/has-role.directive';\nimport { IsLoggedInDirective } from '../../../shared/directives/is-logged-in.directive';\nimport { NotLoggedInDirective } from '../../../shared/directives/not-logged-in.directive';\nimport { RolesEnum } from '../../../enums/roles.enum';\n\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [TranslateModule, HasRoleDirective, IsLoggedInDirective, NotLoggedInDirective],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n})\nexport class DashboardComponent {\n  protected readonly rolesEnum = RolesEnum;\n}\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>dashboard works!</p>\n<h1>{{ 'APP.TITLE' | translate }}</h1>\n<p>{{ 'APP.WELCOME' | translate }}</p>\n<p *hasRole=\"[rolesEnum.USER]\">ROLE USER</p>\n<p *hasRole=\"[rolesEnum.MOD]\">ROLE MOD</p>\n<p *hasRole=\"[rolesEnum.ADMIN]\">ROLE ADMIN</p>\n<p *isLoggedIn>Logged In</p>\n<p *notLoggedIn>Logged Out</p>\n"
        },
        {
            "name": "DonutChartComponent",
            "id": "component-DonutChartComponent-d863b88a6fa4f7102f5539db54d031da7f51913d47fa639394066d135f4e7a7dc74afa2d923cdffc661ebaf0a73bd2183446b63282c0b1c7d0ee6f6e6eb25ec2",
            "file": "src/app/shared/components/donut-chart/donut-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-donut-chart",
            "styleUrls": [
                "./donut-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./donut-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Donut Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartClass",
                    "defaultValue": "'w-full md:w-[30rem]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "{ labels: [], datasets: [] }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "IDonutChartData",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IDonutChartOptions",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartData",
                    "defaultValue": "{ labels: [], datasets: [] }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "chartOptions",
                    "defaultValue": "{\n    cutout: '60%',\n    plugins: {\n      legend: {\n        labels: {\n          color: '#495057',\n        },\n        position: 'top',\n      },\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "_changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ChartModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ChartModule } from 'primeng/chart';\nimport {\n  IDonutChartData,\n  IDonutChartOptions,\n  IDonutChartProps,\n} from '../../types/donut-chart.type';\n\n@Component({\n  selector: 'app-donut-chart',\n  standalone: true,\n  imports: [ChartModule, CommonModule],\n  templateUrl: './donut-chart.component.html',\n  styleUrls: ['./donut-chart.component.scss'],\n})\nexport class DonutChartComponent implements OnInit, OnChanges, IDonutChartProps {\n  @Input() data: IDonutChartData = { labels: [], datasets: [] };\n  @Input() options: IDonutChartOptions = {};\n  @Input() width = '';\n  @Input() height = '';\n  @Input() responsive = true;\n  @Input() chartClass = 'w-full md:w-[30rem]';\n  @Input() chartStyle: Record<string, string> = {};\n  @Input() ariaLabel = 'Donut Chart';\n\n  chartData: IDonutChartData = { labels: [], datasets: [] };\n  chartOptions: IDonutChartOptions = {\n    cutout: '60%',\n    plugins: {\n      legend: {\n        labels: {\n          color: '#495057',\n        },\n        position: 'top',\n      },\n    },\n  };\n\n  ngOnInit(): void {\n    this.updateChart();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ngOnChanges(_changes: SimpleChanges): void {\n    this.updateChart();\n  }\n\n  private updateChart(): void {\n    this.chartData = JSON.parse(JSON.stringify(this.data));\n\n    this.chartOptions = {\n      ...this.chartOptions,\n      ...this.options,\n    };\n\n    if (!this.options.cutout) {\n      this.chartOptions.cutout = '60%';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./donut-chart.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "IDonutChartProps"
            ],
            "templateData": "<div class=\"card flex justify-content-center\">\n  <p-chart\n    type=\"doughnut\"\n    [data]=\"chartData\"\n    [options]=\"chartOptions\"\n    [style]=\"chartStyle\"\n    [width]=\"width\"\n    [height]=\"height\"\n    [responsive]=\"responsive\"\n    [class]=\"chartClass\"\n    [ariaLabel]=\"ariaLabel\"\n  ></p-chart>\n</div>\n"
        },
        {
            "name": "EditorComponent",
            "id": "component-EditorComponent-332978345a65d8b73f5b16372d4f5d13ed0c09bed0dc458109cb56a2694c8dbca0f71acb2e544f4517d08e47c941b7c21857d6f5597f190f1a6ed42a22277bab",
            "file": "src/app/shared/components/editor/editor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => EditorComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./editor.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Record<string | >",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{ height: '320px' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "onTextChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "ITextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ITextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "Editor"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef, ViewEncapsulation } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { Editor } from 'primeng/editor';\nimport { IEditorProps, ITextChangeEvent } from '../../types/editor.types';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  standalone: true,\n  imports: [ReactiveFormsModule, Editor, CommonModule],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => EditorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class EditorComponent implements ControlValueAccessor, IEditorProps {\n  @Input() formControl!: FormControl;\n  @Input() style?: Record<string, string> = { height: '320px' };\n  @Input() styleClass?: string;\n  @Input() placeholder?: string;\n  @Input() formats?: string[];\n  @Input() modules?: Record<string, unknown>;\n  @Input() readOnly = false;\n\n  value = '';\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange: (value: string) => void = () => {};\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouch: () => void = () => {};\n\n  writeValue(value: string): void {\n    this.value = value;\n    this.formControl.setValue(value, { emitEvent: false });\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  onTextChange(event: ITextChangeEvent): void {\n    this.value = event.htmlValue || '';\n    this.onChange(this.value);\n    this.onTouch();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IEditorProps"
            ],
            "templateData": "<div class=\"card\">\n  <p-editor\n    [formControl]=\"formControl\"\n    [style]=\"style\"\n    [styleClass]=\"styleClass\"\n    [placeholder]=\"placeholder\"\n    [formats]=\"formats\"\n    [modules]=\"modules\"\n    [readonly]=\"readOnly\"\n    (onTextChange)=\"onTextChange($event)\"\n  >\n  </p-editor>\n</div>\n"
        },
        {
            "name": "ExampleCrudViewComponent",
            "id": "component-ExampleCrudViewComponent-f6643aea3fb98ab901766f42db41d890aa2bcedf15774e540d4ab6a730fa79b6ac58d96f78d57960db6b7dc1f869e06650e3d5f14c593e6d12fba6619ee20403",
            "file": "src/app/features/example-crud-view/example-crud-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-example-crud-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./example-crud-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmDialogVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "dialogVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "exampleCrudService",
                    "defaultValue": "inject(ExampleCrudService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "exampleForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<ExampleCrudForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "karmelki",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IKarmelki[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selectedKarmelek",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IKarmelki | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteKarmelek",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editKarmelek",
                    "args": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadKarmelki",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveKarmelek",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TableModule",
                    "type": "module"
                },
                {
                    "name": "TagModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "ConfirmModalComponent",
                    "type": "component"
                },
                {
                    "name": "ReusableModalComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { TableModule } from 'primeng/table';\nimport { TagModule } from 'primeng/tag';\nimport { CalendarModule } from 'primeng/calendar';\nimport { RouterEnum } from '../../enums/router.enum';\nimport { ButtonComponent } from '../../shared/components/button/button.component';\nimport { InputComponent } from '../../shared/components/input/input.component';\nimport { ConfirmModalComponent } from '../../shared/components/confirm-modal/confirm-modal.component';\nimport { ExampleCrudForm } from '../../shared/models/form.model';\nimport { ErrorService } from '../../shared/services/error.service';\nimport { FormService } from '../../shared/services/form.service';\nimport { IKarmelki, IKarmelkiResponse } from '../../core/_models/karmelki.model';\nimport { ExampleCrudService } from '../../core/_services/example-crud.service';\nimport { IBaseResponse } from '../../core/_models/base-response.model';\nimport { ReusableModalComponent } from '../../shared/components/reusable-modal/reusable-modal.component';\nimport { CheckboxComponent } from '../../shared/components/checkbox/checkbox.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-example-crud-view',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TableModule,\n    TagModule,\n    CalendarModule,\n    ButtonComponent,\n    InputComponent,\n    CheckboxComponent,\n    ConfirmModalComponent,\n    ReusableModalComponent,\n    TranslateModule,\n  ],\n  templateUrl: './example-crud-view.component.html',\n  styleUrl: './example-crud-view.component.scss',\n})\nexport class ExampleCrudViewComponent implements OnInit {\n  exampleForm!: FormGroup<ExampleCrudForm>;\n  RouterEnum = RouterEnum;\n  karmelki: IKarmelki[] = [];\n  totalRecords = 0;\n  loading = false;\n  dialogVisible = false;\n  confirmDialogVisible = false;\n  editMode = false;\n  selectedKarmelek: IKarmelki | null = null;\n\n  private formService = inject(FormService);\n  private errorService = inject(ErrorService);\n  private exampleCrudService = inject(ExampleCrudService);\n\n  ngOnInit() {\n    this.exampleForm = this.formService.getExampleCrudForm();\n    this.loadKarmelki();\n  }\n\n  get controls() {\n    return this.exampleForm.controls;\n  }\n\n  getErrorMessage(control: FormControl) {\n    return this.errorService.getErrorMessage(control);\n  }\n\n  loadKarmelki(event?: { first: number; rows: number }) {\n    this.loading = true;\n    const pageNumber = event ? event.first / event.rows + 1 : 1;\n    const pageSize = event ? event.rows : 10;\n\n    this.exampleCrudService.getPagedKarmelki({ pageNumber, pageSize }).subscribe({\n      next: (response: IBaseResponse<IKarmelkiResponse>) => {\n        this.karmelki = response.data.items;\n        this.totalRecords = response.data.totalCount;\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Błąd podczas pobierania karmelków', error);\n        this.loading = false;\n      },\n    });\n  }\n\n  showDialog() {\n    this.editMode = false;\n    this.exampleForm.reset();\n    this.controls.isZiemniak.setValue(false);\n    this.controls.arrivalDate.setValue(new Date());\n    this.dialogVisible = true;\n  }\n\n  hideDialog() {\n    this.dialogVisible = false;\n  }\n\n  editKarmelek(karmelek: IKarmelki) {\n    this.editMode = true;\n    this.selectedKarmelek = karmelek;\n    this.exampleForm.patchValue({\n      id: karmelek.id || '',\n      name: karmelek.name,\n      count: karmelek.count,\n      price: karmelek.price,\n      isZiemniak: karmelek.isZiemniak,\n      arrivalDate: new Date(karmelek.arrivalDate),\n    });\n    this.dialogVisible = true;\n  }\n\n  saveKarmelek() {\n    if (this.exampleForm.invalid) {\n      return;\n    }\n\n    const karmelek: IKarmelki = {\n      name: this.controls.name.value,\n      count: this.controls.count.value,\n      price: this.controls.price.value,\n      isZiemniak: this.controls.isZiemniak.value,\n      arrivalDate: this.controls.arrivalDate.value,\n    };\n\n    if (this.editMode && this.selectedKarmelek?.id) {\n      karmelek.id = this.selectedKarmelek.id;\n      this.exampleCrudService.updateKarmelek(this.selectedKarmelek.id, karmelek).subscribe({\n        next: () => {\n          this.loadKarmelki();\n          this.hideDialog();\n        },\n        error: error => console.error('Błąd podczas aktualizacji karmelka', error),\n      });\n    } else {\n      this.exampleCrudService.createKarmelek(karmelek).subscribe({\n        next: () => {\n          this.loadKarmelki();\n          this.hideDialog();\n        },\n        error: error => console.error('Błąd podczas tworzenia karmelka', error),\n      });\n    }\n  }\n\n  confirmDelete(karmelek: IKarmelki) {\n    this.selectedKarmelek = karmelek;\n    this.confirmDialogVisible = true;\n  }\n\n  deleteKarmelek() {\n    if (this.selectedKarmelek?.id) {\n      this.exampleCrudService.deleteKarmelek(this.selectedKarmelek.id).subscribe({\n        next: () => {\n          this.confirmDialogVisible = false;\n          this.loadKarmelki();\n        },\n        error: error => console.error('Błąd podczas usuwania karmelka', error),\n      });\n    }\n  }\n}\n",
            "styleUrl": "./example-crud-view.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<div class=\"card p-4\">\n  <div class=\"flex justify-between items-center mb-6\">\n    <h2>{{ 'EXAMPLE-CRUD.TITLE' | translate }}</h2>\n    <app-button\n      label=\"{{ 'EXAMPLE-CRUD.ADD_NEW' | translate }}\"\n      icon=\"pi pi-plus\"\n      (onClick)=\"showDialog()\"\n    ></app-button>\n  </div>\n  <!-- TODO: zrobić reużywalną tabelkę -->\n  <p-table\n    [value]=\"karmelki\"\n    [paginator]=\"true\"\n    [rows]=\"10\"\n    [responsive]=\"true\"\n    styleClass=\"p-datatable-gridlines p-datatable-sm\"\n    [totalRecords]=\"totalRecords\"\n    [loading]=\"loading\"\n    [lazy]=\"true\"\n    (onPage)=\"loadKarmelki($event)\"\n  >\n    <ng-template pTemplate=\"header\">\n      <tr>\n        <th>{{ 'EXAMPLE-CRUD.NAME' | translate }}</th>\n        <th>{{ 'EXAMPLE-CRUD.COUNT' | translate }}</th>\n        <th>{{ 'EXAMPLE-CRUD.PRICE' | translate }}</th>\n        <th>{{ 'EXAMPLE-CRUD.ZIEMNIAK' | translate }}</th>\n        <th>{{ 'EXAMPLE-CRUD.ARRIVAL_DATE' | translate }}</th>\n        <th>{{ 'EXAMPLE-CRUD.ACTIONS' | translate }}</th>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-karmelek>\n      <tr>\n        <td>{{ karmelek.name }}</td>\n        <td>{{ karmelek.count }}</td>\n        <td>{{ karmelek.price | currency: 'PLN' : 'symbol' : '1.2-2' }}</td>\n        <td>\n          <p-tag\n            [severity]=\"karmelek.isZiemniak ? 'success' : 'danger'\"\n            [value]=\"(karmelek.isZiemniak ? 'UTILS.YES' : 'UTILS.NO') | translate\"\n          >\n          </p-tag>\n        </td>\n        <td>{{ karmelek.arrivalDate | date: 'dd/MM/yyyy' }}</td>\n        <td>\n          <div class=\"flex gap-2\">\n            <app-button\n              icon=\"pi pi-pencil\"\n              severity=\"info\"\n              (onClick)=\"editKarmelek(karmelek)\"\n            ></app-button>\n            <app-button\n              icon=\"pi pi-trash\"\n              severity=\"danger\"\n              (onClick)=\"confirmDelete(karmelek)\"\n            ></app-button>\n          </div>\n        </td>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate=\"emptymessage\">\n      <tr>\n        <td colspan=\"6\" class=\"text-center p-4\">\n          {{ 'EXAMPLE-CRUD.NO_DATA_TO_DISPLAY' | translate }}\n        </td>\n      </tr>\n    </ng-template>\n  </p-table>\n</div>\n<!-- TODO: poprawić wygląd i działanie modala -->\n<app-reusable-modal\n  [visible]=\"dialogVisible\"\n  [header]=\"(editMode ? 'EXAMPLE-CRUD.EDIT' : 'EXAMPLE-CRUD.ADD_NEW') | translate\"\n  [style]=\"{ width: '500px' }\"\n  [draggable]=\"false\"\n>\n  <form [formGroup]=\"exampleForm\" (ngSubmit)=\"saveKarmelek()\">\n    <div class=\"grid gap-4\">\n      <div class=\"col-12\">\n        <app-input\n          [formControl]=\"controls.name\"\n          [label]=\"'EXAMPLE-CRUD.NAME' | translate\"\n          [errorMessage]=\"getErrorMessage(controls.name)\"\n          [invalid]=\"controls.name.invalid && (controls.name.dirty || controls.name.touched)\"\n          [placeholder]=\"'EXAMPLE-CRUD.INPUT_NAME' | translate\"\n          autocomplete=\"name\"\n        >\n        </app-input>\n      </div>\n\n      <div class=\"col-6\">\n        <app-input\n          [formControl]=\"controls.count\"\n          [label]=\"'EXAMPLE-CRUD.COUNT' | translate\"\n          type=\"number\"\n          [errorMessage]=\"getErrorMessage(controls.count)\"\n          [invalid]=\"controls.count.invalid && (controls.count.dirty || controls.count.touched)\"\n          [placeholder]=\"'EXAMPLE-CRUD.INPUT_COUNT' | translate\"\n          autocomplete=\"off\"\n        >\n        </app-input>\n      </div>\n\n      <div class=\"col-6\">\n        <app-input\n          [formControl]=\"controls.price\"\n          [label]=\"'EXAMPLE-CRUD.PRICE' | translate\"\n          type=\"number\"\n          [errorMessage]=\"getErrorMessage(controls.price)\"\n          [invalid]=\"controls.price.invalid && (controls.price.dirty || controls.price.touched)\"\n          [placeholder]=\"'EXAMPLE-CRUD.INPUT_PRICE' | translate\"\n          suffixText=\"PLN\"\n          autocomplete=\"off\"\n        >\n        </app-input>\n      </div>\n\n      <div class=\"col-12 mb-3\">\n        <app-checkbox\n          [formControl]=\"controls.isZiemniak\"\n          binary=\"true\"\n          [label]=\"'EXAMPLE-CRUD.IS_ZIEMNIAK' | translate\"\n          [errorMessage]=\"getErrorMessage(controls.isZiemniak)\"\n          [invalid]=\"\n            controls.isZiemniak.invalid &&\n            (controls.isZiemniak.dirty || controls.isZiemniak.touched)\n          \"\n        >\n        </app-checkbox>\n      </div>\n    </div>\n    <!-- TODO: zrobić reużywalny komponent kalendarza -->\n    <div class=\"col-12 mb-3\">\n      <div class=\"p-field w-full\">\n        <label for=\"arrivalDate\" class=\"block mb-1\">{{\n          'EXAMPLE-CRUD.ARRIVAL_DATE' | translate\n        }}</label>\n        <p-calendar\n          [formControl]=\"controls.arrivalDate\"\n          dateFormat=\"dd/mm/yy\"\n          [showIcon]=\"true\"\n          inputId=\"arrivalDate\"\n          [style]=\"{ width: '50%' }\"\n        ></p-calendar>\n        <small\n          *ngIf=\"\n            controls.arrivalDate.invalid &&\n            (controls.arrivalDate.dirty || controls.arrivalDate.touched)\n          \"\n          class=\"p-error\"\n          >{{ getErrorMessage(controls.arrivalDate) }}</small\n        >\n      </div>\n    </div>\n\n    <div class=\"flex justify-end gap-3 mt-6\">\n      <app-button\n        [label]=\"'UTILS.CANCEL' | translate\"\n        severity=\"secondary\"\n        (onClick)=\"hideDialog()\"\n      ></app-button>\n      <app-button\n        [label]=\"'UTILS.SAVE' | translate\"\n        type=\"submit\"\n        [disabled]=\"exampleForm.invalid\"\n      ></app-button>\n    </div>\n  </form>\n</app-reusable-modal>\n\n<app-confirm-modal\n  [visible]=\"confirmDialogVisible\"\n  [header]=\"'EXAMPLE-CRUD.CONFIRM_DELETE_TITLE' | translate\"\n  [message]=\"'EXAMPLE-CRUD.CONFIRM_DELETE_MESSAGE' | translate\"\n  [yesLabel]=\"'UTILS.YES' | translate\"\n  [noLabel]=\"'UTILS.NO' | translate\"\n  (yes)=\"deleteKarmelek()\"\n  (no)=\"confirmDialogVisible = false\"\n>\n</app-confirm-modal>\n"
        },
        {
            "name": "FileTableComponent",
            "id": "component-FileTableComponent-dc1ff8454d0b18acca05e058ab27255ba95b54a4f76b1d03cebef354656e8a4ec6e22ae4a7ce4e25262ce7f8e516a0c6d11ecc15ab4d7293ec6414a507a661d2",
            "file": "src/app/shared/components/file-table/file-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./file-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "defaultSortField",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultSortOrder",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "enablePagination",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "IFileItem[]",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "paginatorPosition",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Position",
                    "decorators": []
                },
                {
                    "name": "rowsPerPage",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showActionButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSearchBar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileAction",
                    "defaultValue": "new EventEmitter<{ action: string; file: IFileItem }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter<{ page: number; rows: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "fileContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContextMenuComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileContextMenu'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "langChangeSubscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selectedFile",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFileItem | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatFileSize",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFileIcon",
                    "args": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleContextMenuAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initContextMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "\"download\" | \"preview\" | \"delete\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "\"download\" | \"preview\" | \"delete\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGlobalFilter",
                    "args": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableModule",
                    "type": "module"
                },
                {
                    "name": "TooltipModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ContextMenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, inject, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Table, TableModule } from 'primeng/table';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { ButtonComponent } from '../button/button.component';\nimport { InputComponent } from '../input/input.component';\nimport { ContextMenuComponent } from '../context-menu/context-menu.component';\nimport { MenuItem } from 'primeng/api';\nimport { Subscription } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { RouterEnum } from '../../../enums/router.enum';\nimport { IFileItem, IFileTableProps, Position } from '../../types/file-type.types';\n\n@Component({\n  selector: 'app-file-table',\n  standalone: true,\n  imports: [\n    TableModule,\n    TooltipModule,\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    ButtonComponent,\n    InputComponent,\n    ContextMenuComponent,\n  ],\n  templateUrl: './file-table.component.html',\n  styleUrl: './file-table.component.scss',\n})\nexport class FileTableComponent implements OnInit, IFileTableProps {\n  @Input() files: IFileItem[] = [];\n  @Input() enablePagination = true;\n  @Input() rowsPerPage = 10;\n  @Input() showActions = true;\n  @Input() showSearchBar = true;\n  @Input() showActionButtons = true;\n  @Input() defaultSortField = 'name';\n  @Input() defaultSortOrder = 1;\n  @Input() loading = false;\n  @Input() totalRecords = 0;\n  @Input() paginatorPosition: Position = 'bottom';\n  @Output() onPageChange = new EventEmitter<{ page: number; rows: number }>();\n  @Output() fileAction = new EventEmitter<{ action: string; file: IFileItem }>();\n\n  @ViewChild('fileContextMenu') fileContextMenu!: ContextMenuComponent;\n\n  searchControl = new FormControl('');\n  contextMenuItems: MenuItem[] = [];\n  selectedFile: IFileItem | null = null;\n\n  private translateService = inject(TranslateService);\n  private router = inject(Router);\n  private langChangeSubscription: Subscription | null = null;\n\n  ngOnInit() {\n    this.initContextMenuItems();\n\n    this.langChangeSubscription = this.translateService.onLangChange.subscribe(() => {\n      this.initContextMenuItems();\n    });\n  }\n\n  initContextMenuItems() {\n    this.contextMenuItems = [\n      {\n        label: this.translateService.instant('FILE_TABLE.DOWNLOAD'),\n        icon: 'pi pi-download',\n        command: () => this.onFileAction('download', this.selectedFile!),\n      },\n      {\n        label: this.translateService.instant('FILE_TABLE.PREVIEW'),\n        icon: 'pi pi-eye',\n        command: () => this.onFileAction('preview', this.selectedFile!),\n      },\n      {\n        label: this.translateService.instant('FILE_TABLE.DELETE'),\n        icon: 'pi pi-trash',\n        styleClass: 'p-error',\n        command: () => this.onFileAction('delete', this.selectedFile!),\n      },\n    ];\n  }\n  onFileContextMenu(event: MouseEvent, file: IFileItem) {\n    this.selectedFile = file;\n    this.fileContextMenu.show(event);\n    event.preventDefault();\n  }\n\n  handleContextMenuAction(event: { originalEvent: Event; item: MenuItem }) {\n    console.log('Context menu action', event);\n  }\n\n  getFileIcon(file: IFileItem): string {\n    if (file.icon) return file.icon;\n\n    const iconMap: Record<string, string> = {\n      pdf: 'pi pi-file-pdf',\n      doc: 'pi pi-file-word',\n      docx: 'pi pi-file-word',\n      xls: 'pi pi-file-excel',\n      xlsx: 'pi pi-file-excel',\n      ppt: 'pi pi-file',\n      pptx: 'pi pi-file',\n      jpg: 'pi pi-image',\n      jpeg: 'pi pi-image',\n      png: 'pi pi-image',\n      gif: 'pi pi-image',\n      txt: 'pi pi-file',\n      zip: 'pi pi-file',\n      folder: 'pi pi-folder',\n    };\n\n    const fileType = file.type.toLowerCase();\n    return iconMap[fileType] || 'pi pi-file';\n  }\n\n  formatFileSize(bytes: number): string {\n    if (bytes === 0) return '0 B';\n\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  onGlobalFilter(table: Table, event: Event) {\n    table.filterGlobal(event, 'contains');\n  }\n\n  onFileAction(action: 'download' | 'preview' | 'delete', file: IFileItem) {\n    console.log(`Action ${action} on file: ${file.name}`);\n    this.fileAction.emit({ action, file });\n\n    if (action === 'preview') {\n      this.router.navigate([RouterEnum.fileDetails], {\n        queryParams: {\n          id: file.id,\n          name: file.name,\n          type: file.type,\n        },\n      });\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private downloadFile(file: IFileItem): void {\n    // Implement download logic\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private deleteFile(file: IFileItem): void {\n    // Implement delete logic\n  }\n\n  onRefresh() {\n    console.log('Refreshing file list');\n  }\n}\n",
            "styleUrl": "./file-table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "IFileTableProps"
            ],
            "templateData": "<app-context-menu\n  #fileContextMenu\n  [items]=\"contextMenuItems\"\n  (onItemSelect)=\"handleContextMenuAction($event)\"\n>\n</app-context-menu>\n\n<p-table\n  #dt\n  [value]=\"files\"\n  [paginator]=\"enablePagination\"\n  [rows]=\"rowsPerPage\"\n  [totalRecords]=\"files.length\"\n  [rowsPerPageOptions]=\"[5, 10, 25, 50]\"\n  [paginatorPosition]=\"paginatorPosition\"\n  [globalFilterFields]=\"['name', 'type']\"\n  styleClass=\"p-datatable-sm\"\n  [tableStyle]=\"{ 'min-width': '50rem' }\"\n  [sortField]=\"defaultSortField\"\n  [sortOrder]=\"defaultSortOrder\"\n>\n  <ng-template pTemplate=\"caption\">\n    @if (showSearchBar) {\n      <div class=\"flex justify-content-between\">\n        <span>\n          <app-input\n            [formControl]=\"searchControl\"\n            [placeholder]=\"'FILE_TABLE.SEARCH_PLACEHOLDER' | translate\"\n            prefixIcon=\"search\"\n            (ngModelChange)=\"onGlobalFilter(dt, $event)\"\n            autocomplete=\"off\"\n          >\n          </app-input>\n        </span>\n        @if (showActionButtons) {\n          <span>\n            <app-button\n              [label]=\"'FILE_TABLE.REFRESH' | translate\"\n              icon=\"pi-refresh\"\n              (onClick)=\"onRefresh()\"\n            >\n            </app-button>\n          </span>\n        }\n      </div>\n    }\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <tr>\n      <th pSortableColumn=\"name\" style=\"min-width: 14rem\">\n        {{ 'FILE_TABLE.NAME' | translate }} <p-sortIcon field=\"name\"></p-sortIcon>\n      </th>\n      <th pSortableColumn=\"type\" style=\"min-width: 8rem\">\n        {{ 'FILE_TABLE.TYPE' | translate }} <p-sortIcon field=\"type\"></p-sortIcon>\n      </th>\n      <th pSortableColumn=\"size\" style=\"min-width: 8rem\">\n        {{ 'FILE_TABLE.SIZE' | translate }} <p-sortIcon field=\"size\"></p-sortIcon>\n      </th>\n      <th pSortableColumn=\"lastModified\" style=\"min-width: 10rem\">\n        {{ 'FILE_TABLE.LAST_MODIFIED' | translate }} <p-sortIcon field=\"lastModified\"></p-sortIcon>\n      </th>\n      @if (showActions) {\n        <th style=\"min-width: 8rem\">{{ 'FILE_TABLE.ACTIONS' | translate }}</th>\n      }\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"body\" let-file>\n    <tr (contextmenu)=\"onFileContextMenu($event, file)\">\n      <td>\n        <div class=\"flex align-items-center gap-2\">\n          <i [class]=\"getFileIcon(file)\" style=\"font-size: 1.5rem\"></i>\n          <span>{{ file.name }}</span>\n        </div>\n      </td>\n      <td>{{ file.type }}</td>\n      <td>{{ formatFileSize(file.size) }}</td>\n      <td>{{ file.lastModified | date: 'medium' }}</td>\n      @if (showActions) {\n        <td>\n          <div class=\"flex gap-2\">\n            <app-button\n              icon=\"pi pi-download\"\n              variant=\"text\"\n              [rounded]=\"true\"\n              ariaLabel=\"{{ 'FILE_TABLE.DOWNLOAD' | translate }}\"\n              (onClick)=\"onFileAction('download', file)\"\n            >\n            </app-button>\n            <app-button\n              icon=\"pi pi-eye\"\n              variant=\"text\"\n              [rounded]=\"true\"\n              ariaLabel=\"{{ 'FILE_TABLE.PREVIEW' | translate }}\"\n              (onClick)=\"onFileAction('preview', file)\"\n            >\n            </app-button>\n            <app-button\n              icon=\"pi pi-trash\"\n              severity=\"danger\"\n              variant=\"text\"\n              [rounded]=\"true\"\n              ariaLabel=\"{{ 'FILE_TABLE.DELETE' | translate }}\"\n              (onClick)=\"onFileAction('delete', file)\"\n            >\n            </app-button>\n          </div>\n        </td>\n      }\n    </tr>\n  </ng-template>\n\n  <ng-template pTemplate=\"emptymessage\">\n    <tr>\n      <td colspan=\"5\" class=\"text-center p-4\">\n        <i class=\"pi pi-folder-open\" style=\"font-size: 2rem; opacity: 0.5\"></i>\n        <p>{{ 'FILE_TABLE.NO_FILES' | translate }}</p>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n"
        },
        {
            "name": "FileUploaderComponent",
            "id": "component-FileUploaderComponent-e527a71db77939394ede08d2eb4161b4ae0850a373f0cc2abd08085da6a99ee2363438232e1b61bc363b8de9f242aa499903112e7b8bc66cbef60cc3dc441f2c",
            "file": "src/app/shared/components/file-uploader/file-uploader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-uploader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./file-uploader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "'image/*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "auto",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cancelLabel",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseLabel",
                    "defaultValue": "'Choose'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Drag and drop files to here to upload.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxFileSize",
                    "defaultValue": "1000000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "IFileUploadMode",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'files'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCancelButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showUploadButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "uploadLabel",
                    "defaultValue": "'Upload'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useService",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onFileUpload",
                    "defaultValue": "new EventEmitter<File[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uploadedFiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "clearUploadedFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpload",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUploadHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FileUploadModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FileUploadModule } from 'primeng/fileupload';\nimport { IFileUploadMode, IFileUploadProps } from '../../types/fileUploader.types';\n\n@Component({\n  selector: 'app-file-uploader',\n  templateUrl: './file-uploader.component.html',\n  standalone: true,\n  imports: [FileUploadModule, CommonModule],\n})\nexport class FileUploaderComponent implements IFileUploadProps {\n  @Input() url = '';\n  @Input() multiple = true;\n  @Input() accept = 'image/*';\n  @Input() maxFileSize = 1000000;\n  @Input() mode: IFileUploadMode = 'basic';\n  @Input() emptyMessage = 'Drag and drop files to here to upload.';\n  @Input() name = 'files';\n  @Input() auto = false;\n  @Input() showCancelButton = true;\n  @Input() showUploadButton = true;\n  @Input() chooseLabel = 'Choose';\n  @Input() uploadLabel = 'Upload';\n  @Input() cancelLabel = 'Cancel';\n  @Input() useService = true;\n\n  @Output() onFileUpload = new EventEmitter<File[]>();\n  uploadedFiles: File[] = [];\n\n  onUpload(event: { files: File[] }) {\n    for (const file of event.files) {\n      this.uploadedFiles.push(file);\n    }\n    this.onFileUpload.emit(event.files);\n  }\n\n  onUploadHandler(event: { files: File[] }) {\n    const files = event.files;\n    this.onFileUpload.emit(files);\n  }\n\n  clearUploadedFiles() {\n    this.uploadedFiles = [];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IFileUploadProps"
            ],
            "templateData": "<div class=\"card\">\n  <p-fileupload\n    [chooseLabel]=\"chooseLabel\"\n    [uploadLabel]=\"uploadLabel\"\n    [cancelLabel]=\"cancelLabel\"\n    [name]=\"name\"\n    [url]=\"useService ? undefined : url\"\n    [customUpload]=\"useService\"\n    (uploadHandler)=\"onUploadHandler($event)\"\n    (onUpload)=\"onUpload($event)\"\n    [multiple]=\"multiple\"\n    [accept]=\"accept\"\n    [maxFileSize]=\"maxFileSize\"\n    [mode]=\"mode\"\n    [auto]=\"auto\"\n    [showCancelButton]=\"showCancelButton\"\n    [showUploadButton]=\"showUploadButton\"\n  >\n    <ng-template pTemplate=\"empty\">\n      <div>{{ emptyMessage }}</div>\n    </ng-template>\n\n    <ng-template pTemplate=\"content\">\n      @if (uploadedFiles.length) {\n        <ul>\n          @for (file of uploadedFiles; track file) {\n            <li>{{ file.name }} - {{ file.size }} bytes</li>\n          }\n        </ul>\n      }\n    </ng-template>\n  </p-fileupload>\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-f2202a9da3af4cfaeedb57d7cb825da317b219ba86bac7a472e3f9859cd69301513608ba027b39020c2d91ebebe4eb0e87a42014c0ccbf90b25d62890874877f",
            "file": "src/app/shared/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "links",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "socialLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { IFooterProps } from '../../types/footer.types';\nimport { IMenuItem } from '../../types/navbar.types';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [CommonModule, RouterModule, TranslateModule],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss',\n})\nexport class FooterComponent implements IFooterProps {\n  @Input() logo?: string;\n  @Input() title?: string;\n  @Input() links: IMenuItem[] = [];\n  @Input() socialLinks: IMenuItem[] = [];\n  @Input() customClass?: string;\n\n  get currentYear(): number {\n    return new Date().getFullYear();\n  }\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IFooterProps"
            ],
            "accessors": {
                "currentYear": {
                    "name": "currentYear",
                    "getSignature": {
                        "name": "currentYear",
                        "type": "number",
                        "returnType": "number",
                        "line": 22
                    }
                }
            },
            "templateData": "<footer [class]=\"['footer', customClass]\">\n  <div class=\"container\">\n    <div class=\"branding\">\n      @if (logo) {\n        <img [src]=\"logo\" alt=\"Logo\" class=\"logo-img\" />\n      }\n      @if (title) {\n        <span class=\"title\">{{ title | translate }}</span>\n      }\n    </div>\n\n    @if (links && links.length) {\n      <div class=\"links\">\n        @for (link of links; track link) {\n          @if (link.routerLink) {\n            <a [routerLink]=\"link.routerLink\" [queryParams]=\"link.queryParams\">\n              @if (link.icon) {\n                <i class=\"{{ link.icon }}\"></i>\n              }\n              {{ link.label }}\n            </a>\n          }\n          @if (link.url) {\n            <a [href]=\"link.url\" [target]=\"link.target\">\n              @if (link.icon) {\n                <i class=\"{{ link.icon }}\"></i>\n              }\n              {{ link.label }}\n            </a>\n          }\n        }\n      </div>\n    }\n\n    @if (socialLinks && socialLinks.length) {\n      <div class=\"social-links\">\n        @for (social of socialLinks; track social) {\n          @if (social.url) {\n            <a [href]=\"social.url\" [target]=\"social.target\">\n              @if (social.icon) {\n                <i class=\"{{ social.icon }}\"></i>\n              }\n              {{ social.label }}\n            </a>\n          }\n        }\n      </div>\n    }\n\n    <div class=\"copyright\">\n      &copy; {{ currentYear }} {{ 'FOOTER.TITLE' | translate }}.\n      {{ 'FOOTER.COPYRIGHT' | translate }}\n    </div>\n  </div>\n</footer>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 6px 0 6px 10px;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  margin-right: 10px;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ImageComponent",
            "id": "component-ImageComponent-b7e3c9c4405e2d2a0f01d87c6e2920a349bfdb925397fd481613f90d5fe45975ad491f525ac07e36317b1de76d5e43ec986c1c9c5a8415c777f230d8a96afd2f",
            "file": "src/app/shared/components/image/image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./image.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appendTo",
                    "defaultValue": "'body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | HTMLElement",
                    "decorators": []
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "preview",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ImageModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ImageModule } from 'primeng/image';\nimport { IImageProps } from '../../types/image.types';\n\n@Component({\n  selector: 'app-image',\n  standalone: true,\n  imports: [CommonModule, ImageModule],\n  templateUrl: './image.component.html',\n})\nexport class ImageComponent implements IImageProps {\n  @Input() src = '';\n  @Input() alt = '';\n  @Input() width?: string;\n  @Input() height?: string;\n  @Input() preview = true;\n  @Input() imageClass?: string;\n  @Input() imageStyle?: Record<string, string> = {};\n  @Input() appendTo: string | HTMLElement = 'body';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IImageProps"
            ],
            "templateData": "<p-image\n  [src]=\"src\"\n  [alt]=\"alt\"\n  [width]=\"width\"\n  [height]=\"height\"\n  [preview]=\"preview\"\n  [imageClass]=\"imageClass\"\n  [imageStyle]=\"imageStyle\"\n  [appendTo]=\"appendTo\"\n>\n  <ng-content></ng-content>\n</p-image>\n"
        },
        {
            "name": "InfoModalComponent",
            "id": "component-InfoModalComponent-6b41310e88fa993e8f2df448b43705ea0343005c3bfe9a3e867105605d02ec30dc317e995629748257d30bcea7d191cbc40a8552349756e29b7ec85fa5698287",
            "file": "src/app/shared/components/info-modal/info-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./info-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "'Information'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "'Default information message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { DialogModule } from 'primeng/dialog';\nimport { IInfoModalProps } from '../../types/modal.types';\nimport { ButtonModule } from 'primeng/button';\nimport { ButtonComponent } from '../button/button.component';\n\n@Component({\n  selector: 'app-info-modal',\n  standalone: true,\n  imports: [DialogModule, CommonModule, ButtonModule, ButtonComponent],\n  templateUrl: './info-modal.component.html',\n  styleUrl: './info-modal.component.scss',\n})\nexport class InfoModalComponent implements IInfoModalProps {\n  @Input() header = 'Information';\n  @Input() visible = false;\n  @Input() message = 'Default information message';\n}\n",
            "styleUrl": "./info-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IInfoModalProps"
            ],
            "templateData": "<p-dialog header=\"Information\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '20rem' }\">\n  <span class=\"p-text-secondary block mb-4\">{{ message }}</span>\n  <div class=\"flex justify-end\">\n    <app-button label=\"OK\" (click)=\"visible = false\"></app-button>\n  </div>\n</p-dialog>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-aa9b9b756a9b8939c6dcf1a8c0922cc3dedc85b15f594fdae9fec10e4ffea69ce4afb6fad165c9caa5d2290b5e7b3b23097d7f10cd9d6331b207a637a2409d74",
            "file": "src/app/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "IAutocompletePersonalInfo",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "prefixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "IInputIcons",
                    "decorators": []
                },
                {
                    "name": "prefixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "IInputIcons",
                    "decorators": []
                },
                {
                    "name": "suffixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IInputTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "InputNumberModule",
                    "type": "module"
                },
                {
                    "name": "InputGroupModule",
                    "type": "module"
                },
                {
                    "name": "InputGroupAddonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  type ControlValueAccessor,\n} from '@angular/forms';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputNumberModule } from 'primeng/inputnumber';\nimport { InputGroupModule } from 'primeng/inputgroup';\nimport { InputGroupAddonModule } from 'primeng/inputgroupaddon';\nimport { IInputProps, IInputTypes, IInputIcons } from '../../types/input.types';\nimport { IAutocompletePersonalInfo } from '../../types/auto-complete.types';\n\n@Component({\n  selector: 'app-input',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    InputTextModule,\n    InputNumberModule,\n    InputGroupModule,\n    InputGroupAddonModule,\n    ReactiveFormsModule,\n  ],\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class InputComponent<T> implements ControlValueAccessor, IInputProps {\n  @Input() label?: string;\n  @Input() placeholder?: string = '';\n  @Input() type: IInputTypes = 'text';\n  @Input() required = false;\n  @Input() errorMessage?: string;\n  @Input() invalid?: boolean;\n  @Input() prefixIcon?: IInputIcons;\n  @Input() prefixText?: string;\n  @Input() suffixIcon?: IInputIcons;\n  @Input() suffixText?: string;\n  @Input() formControl!: FormControl;\n  @Input() autocomplete!: IAutocompletePersonalInfo;\n\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\n  touched = false;\n  value: T | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n  private onChange = (_value: T) => {};\n  onTouched = () => {\n    this.touched = true;\n  };\n\n  writeValue(value: T): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (value: T) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  onInput(value: T): void {\n    this.value = value;\n    this.onChange(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils/extends';\n.field {\n  @extend %field-layout;\n}\n\nlabel {\n  @extend %label-style;\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IInputProps"
            ],
            "templateData": "<div class=\"field\">\n  @if (label) {\n    <label [for]=\"id\" [class.required]=\"required\">{{ label }}</label>\n  }\n\n  <p-inputgroup>\n    @if (prefixIcon || prefixText) {\n      <p-inputgroup-addon>\n        @if (prefixIcon) {\n          <i class=\"pi pi-{{ prefixIcon }}\"></i>\n        }\n        @if (prefixText) {\n          {{ prefixText }}\n        }\n      </p-inputgroup-addon>\n    }\n    @if (type === 'number') {\n      <p-inputnumber\n        [id]=\"id\"\n        [placeholder]=\"placeholder\"\n        [required]=\"required\"\n        [(ngModel)]=\"value\"\n        (ngModelChange)=\"onInput($event)\"\n        (onBlur)=\"onTouched()\"\n        [useGrouping]=\"false\"\n        [formControl]=\"formControl\"\n        [class.ng-invalid]=\"invalid && errorMessage\"\n        [autocomplete]=\"autocomplete\"\n      />\n    } @else {\n      <input\n        [id]=\"id\"\n        pInputText\n        [type]=\"type\"\n        [placeholder]=\"placeholder\"\n        [required]=\"required\"\n        [ngModel]=\"value\"\n        (ngModelChange)=\"onInput($event)\"\n        (blur)=\"onTouched()\"\n        [formControl]=\"formControl\"\n        [class.ng-invalid]=\"invalid && errorMessage\"\n        [autocomplete]=\"autocomplete\"\n      />\n    }\n    @if (suffixIcon || suffixText) {\n      <p-inputgroup-addon>\n        @if (suffixIcon) {\n          <i class=\"pi pi-{{ suffixIcon }}\"></i>\n        }\n        @if (suffixText) {\n          {{ suffixText }}\n        }\n      </p-inputgroup-addon>\n    }\n  </p-inputgroup>\n\n  @if (invalid && errorMessage) {\n    <small class=\"p-error\">{{ errorMessage }}</small>\n  }\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-cf8e2400b14f40744e18e0a868429493366a36e38158f911deb34fc46fa96aadeca9ab2d825ab067bfa00e3894c32ccb8d03fe2c5c7680c0ef7f9dcd2325d1bc",
            "file": "src/app/features/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<LoginForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PasswordInputComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { LoginForm } from '../../../shared/models/form.model';\nimport { FormService } from '../../../shared/services/form.service';\nimport { InputComponent } from '../../../shared/components/input/input.component';\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\nimport { CommonModule } from '@angular/common';\nimport { PasswordInputComponent } from '../../../shared/components/password-input/password-input.component';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../../core/_services/auth/auth.service';\nimport { RouterEnum } from '../../../enums/router.enum';\nimport { ILoginDto } from '../../../core/_models/DTOs/authDto.model';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ErrorService } from '../../../shared/services/error.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    InputComponent,\n    ReactiveFormsModule,\n    CommonModule,\n    PasswordInputComponent,\n    RouterModule,\n    TranslateModule,\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup<LoginForm>;\n  RouterEnum = RouterEnum;\n\n  protected isLoading = false;\n\n  private formService = inject(FormService);\n  private authService = inject(AuthService);\n  private errorService = inject(ErrorService);\n  private router = inject(Router);\n\n  ngOnInit() {\n    this.loginForm = this.formService.getLoginForm();\n  }\n\n  get controls() {\n    return this.loginForm.controls;\n  }\n\n  getErrorMessage(control: FormControl) {\n    return this.errorService.getErrorMessage(control);\n  }\n\n  onLogin() {\n    this.isLoading = true;\n    this.authService.signIn(this.loginForm.getRawValue() as ILoginDto).subscribe({\n      next: res => {\n        if (res.success) {\n          this.router.navigate([RouterEnum.home]);\n          this.loginForm.reset();\n        } else {\n          this.isLoading = false;\n        }\n      },\n      error: _ => {\n        this.isLoading = false;\n      },\n    });\n  }\n}\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            },
            "templateData": "<div class=\"login-page\">\n  <h1>{{ 'AUTH.LOGIN_TITLE' | translate }}</h1>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n    <app-input\n      [formControl]=\"controls.email\"\n      formControlName=\"email\"\n      [placeholder]=\"'AUTH.EMAIL' | translate\"\n      type=\"email\"\n      autocomplete=\"email\"\n      [errorMessage]=\"getErrorMessage(controls.email)\"\n      [invalid]=\"controls.email.invalid && controls.email.touched\"\n      autocomplete=\"email\"\n    >\n    </app-input>\n\n    <app-password-input\n      [formControl]=\"controls.password\"\n      formControlName=\"password\"\n      [placeholder]=\"'AUTH.PASSWORD' | translate\"\n      autocomplete=\"current-password\"\n      [errorMessage]=\"getErrorMessage(controls.password)\"\n      [invalid]=\"controls.password.invalid && controls.password.touched\"\n      autocomplete=\"current-password\"\n    >\n    </app-password-input>\n\n    <div class=\"submit-button\">\n      <app-button\n        type=\"submit\"\n        [disabled]=\"loginForm.invalid || isLoading\"\n        severity=\"primary\"\n        [label]=\"'AUTH.LOGIN_BUTTON' | translate\"\n      >\n      </app-button>\n    </div>\n\n    <p class=\"text-center\">\n      {{ 'AUTH.FORGOT_PASSWORD_TEXT' | translate }}\n      <a routerLink=\"/{{ RouterEnum.forgetPassword }}\">{{ 'AUTH.RECOVER_PASSWORD' | translate }}</a>\n    </p>\n\n    <p class=\"text-center\">\n      {{ 'AUTH.NO_ACCOUNT_TEXT' | translate }}\n      <a routerLink=\"/{{ RouterEnum.register }}\">{{ 'AUTH.REGISTER' | translate }}</a>\n    </p>\n  </form>\n</div>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-336304301a51cc21615ed05691b1af2242b163ff91228c6a963963bead9551f60ef1ab5dafb5856afea8da1728d0c9ee52b65f3aaeba47d61d0187a845357cc7",
            "file": "src/app/shared/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "authMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "commonMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "langs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "ILangs",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "nonAuthMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "showSwitchLang",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSwitchTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'My Application'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userAvatar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "combinedMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "currentLang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "languages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILanguage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "languageService",
                    "defaultValue": "inject(LanguageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "themeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<ThemeForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "checkCurrentTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchLanguage",
                    "args": [
                        {
                            "name": "langValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MenubarModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ToggleSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, inject, Input, type OnInit } from '@angular/core';\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MenubarModule } from 'primeng/menubar';\nimport type { ILangs, IMenuItem, INavbarProps } from '../../types/navbar.types';\nimport { ButtonComponent } from '../button/button.component';\nimport { ToggleSwitchComponent } from '../toggle-switch/toggle-switch.component';\nimport { ThemeForm } from '../../models/form.model';\nimport { FormService } from '../../services/form.service';\nimport { LanguageService } from '../../../core/_services/language/language.service';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ILanguage } from '../../../core/_models/language.model';\nimport { RouterEnum } from '../../../enums/router.enum';\nimport { AuthService } from '../../../core/_services/auth/auth.service';\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [\n    MenubarModule,\n    CommonModule,\n    ButtonComponent,\n    ToggleSwitchComponent,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n  ],\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss',\n})\nexport class NavbarComponent implements OnInit, INavbarProps {\n  @Input() title = 'My Application';\n  @Input() logo?: string;\n  @Input() menuItems: IMenuItem[] = [];\n  @Input() authMenuItems: IMenuItem[] = [];\n  @Input() nonAuthMenuItems: IMenuItem[] = [];\n  @Input() isAuthenticated = false;\n  @Input() userName = '';\n  @Input() userAvatar = '';\n  @Input() showSwitchTheme = false;\n  @Input() showSwitchLang = false;\n  @Input() commonMenuItems: IMenuItem[] = [];\n  @Input() langs: ILangs = [];\n\n  combinedMenuItems: IMenuItem[] = [];\n  mobileMenuOpen = false;\n  isDarkTheme = false;\n  languages: ILanguage[] = [];\n  currentLang!: string;\n  themeForm!: FormGroup<ThemeForm>;\n  RouterEnum = RouterEnum;\n\n  private router = inject(Router);\n  private formService = inject(FormService);\n  private languageService = inject(LanguageService);\n  private authService = inject(AuthService);\n\n  get controls() {\n    return this.themeForm.controls;\n  }\n\n  ngOnInit() {\n    this.languages = this.languageService.languages;\n\n    this.currentLang = this.languageService.currentLang;\n\n    this.languageService.currentLang$.subscribe(lang => {\n      this.currentLang = lang;\n      this.updateMenu();\n    });\n    this.updateMenu();\n    this.checkCurrentTheme();\n\n    this.themeForm = this.formService.getThemeForm();\n    this.controls.theme.setValue(this.isDarkTheme);\n\n    this.controls.theme.valueChanges.subscribe(isDark => {\n      if (isDark !== this.isDarkTheme) {\n        this.isDarkTheme = isDark;\n        this.toggleTheme();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.updateMenu();\n  }\n\n  updateMenu() {\n    this.combinedMenuItems = [...this.menuItems];\n\n    if (this.isAuthenticated) {\n      this.combinedMenuItems = [...this.combinedMenuItems, ...this.authMenuItems];\n    } else {\n      this.combinedMenuItems = [...this.combinedMenuItems, ...this.nonAuthMenuItems];\n    }\n\n    this.combinedMenuItems = this.combinedMenuItems.filter(item => item.visible !== false);\n  }\n\n  toggleMobileMenu() {\n    this.mobileMenuOpen = !this.mobileMenuOpen;\n  }\n\n  toggleDropdown(item: IMenuItem) {\n    item.expanded = !item.expanded;\n  }\n\n  navigateTo(item: IMenuItem) {\n    if (item.routerLink) {\n      this.router.navigate([item.routerLink]);\n    } else if (item.url) {\n      window.open(item.url, item.target || '_self');\n    } else if (item.command) {\n      item.command();\n    }\n\n    this.mobileMenuOpen = false;\n  }\n\n  logout() {\n    this.authService.signOut();\n    this.updateMenu();\n  }\n\n  toggleTheme() {\n    if (this.isDarkTheme) {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n    localStorage.setItem('theme', this.isDarkTheme ? 'dark' : 'light');\n  }\n\n  checkCurrentTheme() {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n      this.isDarkTheme = true;\n      document.body.classList.add('dark-theme');\n    } else if (savedTheme === 'light') {\n      this.isDarkTheme = false;\n      document.body.classList.remove('dark-theme');\n    } else {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      this.isDarkTheme = prefersDark;\n      if (prefersDark) document.body.classList.add('dark-theme');\n    }\n  }\n\n  switchLanguage(langValue: string) {\n    this.languageService.changeLanguage(langValue);\n  }\n}\n",
            "styleUrl": "./navbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "INavbarProps"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                }
            },
            "templateData": "<nav class=\"navbar\">\n  <div class=\"navbar-container\">\n    <div class=\"navbar-brand\">\n      @if (logo) {\n        <img [src]=\"logo\" alt=\"Logo\" class=\"navbar-logo\" />\n      }\n      <h1 class=\"navbar-title\">{{ title | translate }}</h1>\n    </div>\n\n    <button class=\"navbar-mobile-toggle\" (click)=\"toggleMobileMenu()\">\n      <span class=\"toggle-icon\"></span>\n    </button>\n\n    <div class=\"navbar-menu\" [class.open]=\"mobileMenuOpen\">\n      <ul class=\"navbar-nav\">\n        @for (item of combinedMenuItems; track item) {\n          <li class=\"nav-item\" [class.has-dropdown]=\"item.items?.length\">\n            @if (item.items?.length) {\n              <div class=\"nav-link dropdown-toggle\" (click)=\"toggleDropdown(item)\">\n                @if (item.icon) {\n                  <i class=\"nav-icon {{ item.icon }}\"></i>\n                }\n                {{ item.label | translate }}\n                <i class=\"dropdown-arrow\" [class.expanded]=\"item.expanded\"></i>\n              </div>\n\n              <ul class=\"dropdown-menu\" [class.show]=\"item.expanded\">\n                @for (subItem of item.items; track subItem) {\n                  <li\n                    class=\"dropdown-item\"\n                    [class.disabled]=\"subItem.disabled\"\n                    (click)=\"!subItem.disabled && navigateTo(subItem)\"\n                  >\n                    @if (subItem.icon) {\n                      <i class=\"nav-icon {{ subItem.icon }}\"></i>\n                    }\n                    {{ subItem.label | translate }}\n                  </li>\n                }\n              </ul>\n            } @else {\n              <div\n                class=\"nav-link\"\n                [class.disabled]=\"item.disabled\"\n                (click)=\"!item.disabled && navigateTo(item)\"\n              >\n                @if (item.icon) {\n                  <i class=\"nav-icon {{ item.icon }}\"></i>\n                }\n                {{ item.label | translate }}\n              </div>\n            }\n          </li>\n        }\n      </ul>\n\n      @if (showSwitchLang && langs.length > 0) {\n        <div class=\"language-switcher\">\n          @for (lang of languages; track lang.value) {\n            <app-button\n              [label]=\"lang.label\"\n              [styleClass]=\"currentLang === lang.value ? 'active-lang' : ''\"\n              [variant]=\"currentLang === lang.value ? 'outlined' : 'text'\"\n              [severity]=\"currentLang === lang.value ? 'primary' : 'secondary'\"\n              (onClick)=\"switchLanguage(lang.value)\"\n            >\n            </app-button>\n          }\n        </div>\n      }\n\n      @if (showSwitchTheme) {\n        <div class=\"theme-switcher\">\n          <form [formGroup]=\"themeForm\">\n            <app-toggle-switch\n              [formControl]=\"controls.theme\"\n              [iconOn]=\"'pi-moon'\"\n              [iconOff]=\"'pi-sun'\"\n              (onChange)=\"toggleTheme()\"\n            >\n            </app-toggle-switch>\n          </form>\n        </div>\n      }\n\n      @if (isAuthenticated) {\n        <div class=\"user-section\">\n          <div class=\"user-info\">\n            <span class=\"user-name\">{{ userName }}</span>\n            <div class=\"user-avatar\">\n              @if (userAvatar) {\n                <img [src]=\"userAvatar\" alt=\"User Avatar\" />\n              } @else {\n                <div class=\"avatar-placeholder\">\n                  {{ userName.charAt(0).toUpperCase() }}\n                </div>\n              }\n            </div>\n          </div>\n          <button class=\"logout-button\" (click)=\"logout()\">\n            <i class=\"logout-icon\"></i>\n            {{ 'MENU.LOGOUT' | translate }}\n          </button>\n        </div>\n      }\n    </div>\n  </div>\n</nav>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-7027046d3fedfda8aa6f02d5b8d4520e23ac34e0ae08ee2b24aaae3e06869851fb235e401955170d2a1c7092f0a7c348083e67597fd6e45b361313608b148c51",
            "file": "src/app/features/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-not-found',\n  standalone: true,\n  imports: [TranslateModule],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss',\n})\nexport class NotFoundComponent {}\n",
            "styleUrl": "./not-found.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"not-found-page\">\n  <h1>{{ 'NOT-FOUND.TITLE' | translate }}</h1>\n  <p>{{ 'NOT-FOUND.DESCRIPTION' | translate }}</p>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  margin: 0 auto;\r\n  padding: 48px 20px;\r\n  max-width: 600px;\r\n  color: #333;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-page h2 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 0 0 4px;\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  color: inherit;\r\n}\r\n\r\n.storybook-page ul {\r\n  margin: 1em 0;\r\n  padding-left: 30px;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-right: 10px;\r\n  border-radius: 1em;\r\n  background: #e7fdd8;\r\n  padding: 4px 12px;\r\n  color: #357a14;\r\n  font-weight: 700;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n  margin-right: 4px;\r\n  width: 12px;\r\n  height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PasswordInputComponent",
            "id": "component-PasswordInputComponent-85d3556832fe60b47494d4a84f0114e57b11cd7bbdc9094a4927e7e6bd36be4ae4df5fe8481b8c6999fa625dbf2f65d8597355b2168ce6c6ede5ef7456fed1c3",
            "file": "src/app/shared/components/password-input/password-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PasswordInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-password-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'new-password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IAutocompletePassword",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'outlined'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "IVariant",
                    "decorators": []
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PasswordModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, forwardRef, Input } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { PasswordModule } from 'primeng/password';\nimport { IPasswordInputProps, IVariant } from '../../types/password-input.types';\nimport { IAutocompletePassword } from '../../types/auto-complete.types';\n\n@Component({\n  selector: 'app-password-input',\n  standalone: true,\n  imports: [PasswordModule, CommonModule, ReactiveFormsModule, FormsModule],\n  templateUrl: './password-input.component.html',\n  styleUrl: './password-input.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PasswordInputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class PasswordInputComponent<T> implements ControlValueAccessor, IPasswordInputProps {\n  @Input() label?: string;\n  @Input() placeholder?: string = '';\n  @Input() required = false;\n  @Input() invalid = false;\n  @Input() errorMessage?: string;\n  @Input() formControl!: FormControl;\n  @Input() feedback?: boolean;\n  @Input() promptLabel?: string;\n  @Input() weakLabel?: string;\n  @Input() mediumLabel?: string;\n  @Input() strongLabel?: string;\n  // @Input() size?: Size;\n  @Input() variant: IVariant = 'outlined';\n  @Input() autocomplete: IAutocompletePassword = 'new-password';\n\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\n  touched = false;\n  value: T | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n  private onChange = (_value: T) => {};\n  onTouched = () => {\n    this.touched = true;\n  };\n\n  writeValue(value: T): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (value: T) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  onInput(value: T): void {\n    this.value = value;\n    this.onChange(value);\n  }\n}\n",
            "styleUrl": "./password-input.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IPasswordInputProps"
            ],
            "templateData": "<div class=\"field\">\n  @if (label) {\n    <label [for]=\"id\" class=\"field-label\">\n      {{ label }}\n      @if (required) {\n        <span class=\"required-marker\">*</span>\n      }\n    </label>\n  }\n\n  <p-password\n    [formControl]=\"formControl\"\n    [id]=\"id\"\n    [(ngModel)]=\"value\"\n    (ngModelChange)=\"onInput($event)\"\n    (blur)=\"onTouched()\"\n    [placeholder]=\"placeholder\"\n    [feedback]=\"feedback\"\n    [promptLabel]=\"promptLabel\"\n    [weakLabel]=\"weakLabel\"\n    [mediumLabel]=\"mediumLabel\"\n    [strongLabel]=\"strongLabel\"\n    [variant]=\"variant\"\n    fluid=\"true\"\n    [class.ng-invalid]=\"invalid && errorMessage\"\n    [required]=\"required\"\n    [autocomplete]=\"autocomplete\"\n  >\n  </p-password>\n\n  @if (invalid && errorMessage) {\n    <small class=\"p-error\">{{ errorMessage }}</small>\n  }\n</div>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-6974639bb01166e0a66eb9a92c1a7ee931558fb1898bb63db6de9eee0b0370054a9f312611961903184b8de222e31ca6f33ef5c9f06511d07f419bfdd021f71a",
            "file": "src/app/features/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<RegisterForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PasswordInputComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { PasswordInputComponent } from '../../../shared/components/password-input/password-input.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { InputComponent } from '../../../shared/components/input/input.component';\r\nimport { RegisterForm } from '../../../shared/models/form.model';\r\nimport { FormService } from '../../../shared/services/form.service';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { AuthService } from '../../../core/_services/auth/auth.service';\r\nimport { RouterEnum } from '../../../enums/router.enum';\r\nimport { IRegisterDto } from '../../../core/_models/DTOs/authDto.model';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ErrorService } from '../../../shared/services/error.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    InputComponent,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    PasswordInputComponent,\r\n    RouterModule,\r\n    FormsModule,\r\n    TranslateModule,\r\n  ],\r\n  templateUrl: './register.component.html',\r\n  styleUrl: './register.component.scss',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm!: FormGroup<RegisterForm>;\r\n  RouterEnum = RouterEnum;\r\n  \r\n  protected isLoading = false;\r\n\r\n  private formService = inject(FormService);\r\n  private authService = inject(AuthService);\r\n  private errorService = inject(ErrorService);\r\n  private router = inject(Router);\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formService.getRegisterForm();\r\n  }\r\n\r\n  get controls() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  getErrorMessage(control: FormControl) {\r\n    return this.errorService.getErrorMessage(control);\r\n  }\r\n\r\n  onRegister() {\r\n    this.isLoading = true;\r\n    this.authService.signUp(this.registerForm.getRawValue() as IRegisterDto).subscribe({\r\n      next: res => {\r\n        if (res.success) {\r\n          this.router.navigate([RouterEnum.home]);\r\n          this.registerForm.reset();\r\n          this.isLoading = false;\r\n        }\r\n      },\r\n      error: _ => {\r\n        this.isLoading = false;\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"register-page\">\n  <h1>{{ 'AUTH.REGISTER_TITLE' | translate }}</h1>\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\n    <app-input\n      [formControl]=\"controls.username\"\n      [placeholder]=\"'AUTH.USERNAME' | translate\"\n      type=\"text\"\n      autocomplete=\"name\"\n      [errorMessage]=\"getErrorMessage(controls.username)\"\n      [invalid]=\"controls.username.invalid && controls.username.touched\"\n      autocomplete=\"username\"\n    >\n    </app-input>\n\n    <app-input\n      [formControl]=\"controls.firstName\"\n      [placeholder]=\"'AUTH.FIRST_NAME' | translate\"\n      type=\"text\"\n      autocomplete=\"given-name\"\n      [errorMessage]=\"getErrorMessage(controls.firstName)\"\n      [invalid]=\"controls.firstName.invalid && controls.firstName.touched\"\n      autocomplete=\"given-name\"\n    >\n    </app-input>\n\n    <app-input\n      [formControl]=\"controls.lastName\"\n      [placeholder]=\"'AUTH.LAST_NAME' | translate\"\n      type=\"text\"\n      autocomplete=\"family-name\"\n      [errorMessage]=\"getErrorMessage(controls.lastName)\"\n      [invalid]=\"controls.lastName.invalid && controls.lastName.touched\"\n      autocomplete=\"family-name\"\n    >\n    </app-input>\n\n    <app-input\n      [formControl]=\"controls.email\"\n      [placeholder]=\"'AUTH.EMAIL' | translate\"\n      type=\"email\"\n      autocomplete=\"email\"\n      [errorMessage]=\"getErrorMessage(controls.email)\"\n      [invalid]=\"controls.email.invalid && controls.email.touched\"\n      autocomplete=\"email\"\n    >\n    </app-input>\n\n    <app-password-input\n      [formControl]=\"controls.password\"\n      [placeholder]=\"'AUTH.PASSWORD' | translate\"\n      autocomplete=\"current-password\"\n      [errorMessage]=\"getErrorMessage(controls.password)\"\n      [invalid]=\"controls.password.invalid && controls.password.touched\"\n      [promptLabel]=\"'AUTH.PASSWORD_PROMPT' | translate\"\n      [weakLabel]=\"'AUTH.PASSWORD_WEAK' | translate\"\n      [mediumLabel]=\"'AUTH.PASSWORD_MEDIUM' | translate\"\n      [strongLabel]=\"'AUTH.PASSWORD_STRONG' | translate\"\n      [feedback]=\"true\"\n    >\n      autocomplete=\"current-password\"\n    </app-password-input>\n\n    <app-password-input\n      [formControl]=\"controls.confirmPassword\"\n      [placeholder]=\"'AUTH.CONFIRM_PASSWORD' | translate\"\n      autocomplete=\"current-password\"\n      [errorMessage]=\"getErrorMessage(controls.confirmPassword)\"\n      [invalid]=\"controls.confirmPassword.invalid && controls.confirmPassword.touched\"\n      autocomplete=\"current-password\"\n    >\n    </app-password-input>\n\n    <div class=\"submit-button\">\n      <app-button\n        type=\"submit\"\n        [disabled]=\"registerForm.invalid || isLoading\"\n        severity=\"primary\"\n        [label]=\"'AUTH.REGISTER_BUTTON' | translate\"\n      >\n      </app-button>\n    </div>\n\n    <p class=\"text-center\">\n      {{ 'AUTH.FORGOT_PASSWORD_TEXT' | translate }}\n      <a routerLink=\"/{{ RouterEnum.forgetPassword }}\">{{ 'AUTH.RECOVER_PASSWORD' | translate }}</a>\n    </p>\n\n    <p class=\"text-center\">\n      {{ 'AUTH.HAS_ACCOUNT_TEXT' | translate }}\n      <a routerLink=\"/{{ RouterEnum.login }}\">{{ 'AUTH.LOGIN' | translate }}</a>\n    </p>\n  </form>\n</div>\n"
        },
        {
            "name": "ReusableModalComponent",
            "id": "component-ReusableModalComponent-ad4d7ec33697bad8be417fa65730a77af02071791f4a7e05945da84d4d47d3f24befffaa02216217bd082466cd904e0dc74d40d86146e0a5317db804697bf2ff",
            "file": "src/app/shared/components/reusable-modal/reusable-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reusable-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./reusable-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "'Confirm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { DialogModule } from 'primeng/dialog';\nimport { IReusableModalProps } from '../../types/resuable-modal.types';\n\n@Component({\n  selector: 'app-reusable-modal',\n  standalone: true,\n  imports: [DialogModule, CommonModule],\n  templateUrl: './reusable-modal.component.html',\n  styleUrl: './reusable-modal.component.scss',\n})\nexport class ReusableModalComponent implements IReusableModalProps {\n  @Input() header = 'Confirm';\n  @Input() visible = false;\n  @Input() draggable = true;\n}\n",
            "styleUrl": "./reusable-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IReusableModalProps"
            ],
            "templateData": "<p-dialog [header]=\"header\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '40rem' } \" [draggable]=\"draggable\">\r\n  <ng-content></ng-content>\r\n</p-dialog>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-f66dbd32640a533dddc9ce478fe85946f5ae61a036df8a8af82874f7bbc98f2aaa7e6e0df5acb00383b116ec0285c85c1b912b5657feef0c045ed4cb624c53ec",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkmark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "editable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelVariant",
                    "defaultValue": "'over'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "ILabelVariant",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "T | null",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IVariant",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeEvent",
                    "defaultValue": "new EventEmitter<{\n    originalEvent: Event;\n    value: T;\n  }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<{ originalEvent: Event; value: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "onChangeCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SelectModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FloatLabelModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { SelectModule } from 'primeng/select';\nimport { FloatLabelModule } from 'primeng/floatlabel';\nimport { ISelectProps, IVariant, ILabelVariant } from '../../types/select.types';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [SelectModule, ReactiveFormsModule, FormsModule, FloatLabelModule, CommonModule],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true,\n    },\n  ],\n})\nexport class SelectComponent<T = unknown> implements ISelectProps<T>, ControlValueAccessor {\n  @Input() formControl!: FormControl;\n  @Input() options?: T[];\n  @Input() optionLabel?: string;\n  @Input() optionValue?: string;\n  @Input() placeholder?: string;\n  @Input() filter?: boolean;\n  @Input() checkmark = false;\n  @Input() editable = false;\n  @Input() filterBy?: string;\n  @Input() loading = false;\n  @Input() showClear = false;\n  @Input() virtualScroll?: boolean;\n  @Input() virtualScrollItemSize?: number;\n  @Input() variant: IVariant = 'filled';\n  @Input() required?: boolean;\n  @Input() label?: string;\n  @Input() labelVariant: ILabelVariant = 'over';\n  @Input() inputId?: string;\n  @Input() errorMessage?: string;\n  @Input() invalid?: boolean;\n  @Input() set value(val: T | null) {\n    if (val !== this._value) {\n      this._value = val === null ? undefined : val;\n      this.onChangeCallback(val);\n      this.onTouchCallback();\n      this.valueChange.emit(val === null ? undefined : val);\n    }\n  }\n\n  @Output() valueChange = new EventEmitter<T>();\n  @Output() onSelect = new EventEmitter<{ originalEvent: Event; value: T }>();\n  @Output() onChangeEvent = new EventEmitter<{\n    originalEvent: Event;\n    value: T;\n  }>();\n\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\n\n  _value: T | undefined = undefined;\n\n  // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures\n  get value(): T | undefined {\n    return this._value;\n  }\n\n  touched = false;\n\n  onTouched = () => {\n    this.touched = true;\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private onChangeCallback: (value: T | null) => void = () => {};\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private onTouchCallback: () => void = () => {};\n\n  writeValue(value: T): void {\n    if (value !== this._value) {\n      this._value = value;\n    }\n  }\n\n  registerOnChange(fn: (value: T | null) => void): void {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n\n  handleChange(event: { originalEvent: Event; value: T }): void {\n    this.onChangeCallback(event.value);\n    this.onTouchCallback();\n    this.valueChange.emit(event.value);\n    this.onChangeEvent.emit(event);\n  }\n}\n",
            "styleUrl": "./select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ISelectProps",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T | undefined",
                        "line": 70
                    }
                }
            },
            "templateData": "<div class=\"field\">\n  @if (!label) {\n  <p-select [formControl]=\"formControl\" [checkmark]=\"checkmark\" [showClear]=\"showClear\" [editable]=\"editable\"\n    [filter]=\"filter\" [filterBy]=\"filterBy\" [loading]=\"loading\" [virtualScroll]=\"virtualScroll\"\n    [virtualScrollItemSize]=\"virtualScrollItemSize\" [options]=\"options\" [(ngModel)]=\"value\" [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\" [placeholder]=\"placeholder\" [variant]=\"variant\" class=\"w-full md:w-56\"\n    (onChange)=\"handleChange($event)\">\n  </p-select>\n  } @else {\n  <p-floatlabel class=\"w-full md:w-56\" [variant]=\"labelVariant\">\n    <p-select [formControl]=\"formControl\" [inputId]=\"inputId\" [checkmark]=\"checkmark\" [showClear]=\"showClear\"\n      [editable]=\"editable\" [filter]=\"filter\" [filterBy]=\"filterBy\" [loading]=\"loading\" [virtualScroll]=\"virtualScroll\"\n      [virtualScrollItemSize]=\"virtualScrollItemSize\" [options]=\"options\" [(ngModel)]=\"value\"\n      [optionLabel]=\"optionLabel\" [optionValue]=\"optionValue\" [variant]=\"variant\" styleClass=\"w-full\"\n      (onChange)=\"handleChange($event)\">\n    </p-select>\n    <label [for]=\"inputId\" [class.required-label]=\"required\">\n      {{ label }}\n    </label>\n  </p-floatlabel>\n  }\n\n  @if (invalid && errorMessage && touched) {\n  <small class=\"p-error\">{{ errorMessage }}</small>\n  }\n</div>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-6652b58bc481a59fd623dcf1bbfdad20373db54c7ddea012d4a2c00e6a97a63208332633fb658313904abba1954e392b16073d9b1d73ba3561ff24804d917519",
            "file": "src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButtons",
                    "defaultValue": "[\n    { icon: 'pi pi-download', ariaLabel: 'TABLE.DOWNLOAD', action: 'download' },\n    { icon: 'pi pi-eye', ariaLabel: 'TABLE.PREVIEW', action: 'preview' },\n    { icon: 'pi pi-trash', severity: 'danger', ariaLabel: 'TABLE.DELETE', action: 'delete' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "ITableActionButton[]",
                    "decorators": []
                },
                {
                    "name": "cols",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ITableColumn[]",
                    "decorators": []
                },
                {
                    "name": "contextMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "defaultSortField",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultSortOrder",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "enablePaginator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableResizableColumns",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "footerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "minWidth",
                    "defaultValue": "'50rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "paginatorPosition",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "Position",
                    "decorators": []
                },
                {
                    "name": "rowsPerPage",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rowsPerPageOptions",
                    "defaultValue": "[5, 10, 20]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "showActionButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showGridlines",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSearchBar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stripedRows",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onActionEvent",
                    "defaultValue": "new EventEmitter<{ action: string; item: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "onContextMenuActionEvent",
                    "defaultValue": "new EventEmitter<{ action: Event; item: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter<{ page: number; rows: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRefreshEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContextMenuComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Table",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dt'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleContextMenuAction",
                    "args": [
                        {
                            "name": "actionData",
                            "type": "IContextMenuAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actionData",
                            "type": "IContextMenuAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGlobalFilter",
                    "args": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ContextMenuComponent",
                    "type": "component"
                },
                {
                    "name": "TooltipModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { TableModule } from 'primeng/table';\nimport {\n  IContextMenuAction,\n  ITableActionButton,\n  ITableColumn,\n  ITableProps,\n  Position,\n} from '../../types/table.types';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { MenuItem } from 'primeng/api';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { ButtonComponent } from '../button/button.component';\nimport { ContextMenuComponent } from '../context-menu/context-menu.component';\nimport { InputComponent } from '../input/input.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Table } from 'primeng/table';\n\n@Component({\n  selector: 'app-table',\n  standalone: true,\n  imports: [\n    TableModule,\n    CommonModule,\n    ButtonComponent,\n    InputComponent,\n    ContextMenuComponent,\n    TooltipModule,\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n  ],\n  templateUrl: './table.component.html',\n  styleUrl: './table.component.scss',\n})\nexport class TableComponent<T = unknown> implements ITableProps<T> {\n  @Input() cols: ITableColumn[] = [];\n  @Input() data: T[] = [];\n  @Input() headerTitle?: string;\n  @Input() footerTitle?: string;\n  @Input() showGridlines = false;\n  @Input() stripedRows = false;\n  @Input() rowsPerPage = 5;\n  @Input() rowsPerPageOptions: number[] = [5, 10, 20];\n  @Input() enablePaginator = true;\n  @Input() enableResizableColumns = true;\n  @Input() minWidth = '50rem';\n  @Input() showActions = true;\n  @Input() showSearchBar = true;\n  @Input() showActionButtons = true;\n  @Input() defaultSortField = 'name';\n  @Input() defaultSortOrder = 1;\n  @Input() loading = false;\n  @Input() totalRecords = 0;\n  @Input() paginatorPosition: Position = 'bottom';\n  @Input() contextMenuItems: MenuItem[] = [];\n  @Input() actionButtons: ITableActionButton[] = [\n    { icon: 'pi pi-download', ariaLabel: 'TABLE.DOWNLOAD', action: 'download' },\n    { icon: 'pi pi-eye', ariaLabel: 'TABLE.PREVIEW', action: 'preview' },\n    { icon: 'pi pi-trash', severity: 'danger', ariaLabel: 'TABLE.DELETE', action: 'delete' },\n  ];\n\n  @Output() onPageChange = new EventEmitter<{ page: number; rows: number }>();\n  @Output() onActionEvent = new EventEmitter<{ action: string; item: T }>();\n  @Output() onRefreshEvent = new EventEmitter<void>();\n  @Output() onContextMenuActionEvent = new EventEmitter<{ action: Event; item: T }>();\n\n  @ViewChild('dt') table!: Table;\n  @ViewChild('contextMenu') contextMenu!: ContextMenuComponent;\n\n  searchControl = new FormControl('');\n  selectedItem: T | null = null;\n\n  onGlobalFilter(table: Table, event: string): void {\n    table.filterGlobal(event, 'contains');\n  }\n\n  onRefresh(): void {\n    this.onRefreshEvent.emit();\n  }\n\n  onAction(action: string, item: T): void {\n    this.onActionEvent.emit({ action, item });\n  }\n\n  handleContextMenuAction(actionData: IContextMenuAction): void {\n    if (this.selectedItem) {\n      this.onContextMenuActionEvent.emit({\n        action: actionData.originalEvent,\n        item: this.selectedItem,\n      });\n    }\n  }\n\n  showContextMenu(event: MouseEvent, item: T): void {\n    this.selectedItem = item;\n    this.contextMenu.show(event);\n    event.preventDefault();\n  }\n}\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ITableProps"
            ],
            "templateData": "<app-context-menu #contextMenu [items]=\"contextMenuItems\" (onItemSelect)=\"handleContextMenuAction($event)\">\r\n</app-context-menu>\r\n\r\n\r\n<p-table #dt [columns]=\"cols\" [value]=\"data\" [tableStyle]=\"{ 'min-width': minWidth }\" [showGridlines]=\"showGridlines\"\r\n  [stripedRows]=\"stripedRows\" [rowsPerPageOptions]=\"rowsPerPageOptions\" [paginator]=\"enablePaginator\"\r\n  [resizableColumns]=\"enableResizableColumns\" [rows]=\"rowsPerPage\" [loading]=\"loading\" [totalRecords]=\"totalRecords\"\r\n  [paginatorPosition]=\"paginatorPosition\"\r\n  (onPage)=\"onPageChange.emit({ page: $event.first / $event.rows, rows: $event.rows })\">\r\n\r\n  @if (headerTitle || showSearchBar || showActionButtons) {\r\n  <ng-template pTemplate=\"caption\">\r\n    @if (headerTitle) {\r\n    <div class=\"flex items-center justify-between\">\r\n      <span class=\"text-xl font-bold\">{{headerTitle}}</span>\r\n    </div>\r\n    }\r\n\r\n    @if (showSearchBar) {\r\n    <div class=\"flex justify-content-between\">\r\n      <span>\r\n        <app-input [formControl]=\"searchControl\" [placeholder]=\"'TABLE.SEARCH_PLACEHOLDER' | translate\"\r\n          prefixIcon=\"search\" (ngModelChange)=\"onGlobalFilter(dt, $event)\" autocomplete=\"off\">\r\n        </app-input>\r\n      </span>\r\n      @if (showActionButtons) {\r\n      <span>\r\n        <app-button [label]=\"'TABLE.REFRESH' | translate\" icon=\"pi-refresh\" (onClick)=\"onRefresh()\">\r\n        </app-button>\r\n      </span>\r\n      }\r\n    </div>\r\n    }\r\n  </ng-template>\r\n  }\r\n  <ng-template pTemplate=\"header\" let-columns>\r\n    <tr>\r\n      @for (col of columns; track col) {\r\n      <th>\r\n        {{ col.header }}\r\n      </th>\r\n      }\r\n      @if (showActions) {\r\n      <th>{{ 'TABLE.ACTIONS' | translate }}</th>\r\n      }\r\n    </tr>\r\n  </ng-template>\r\n\r\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n    <tr (contextmenu)=\"showContextMenu($event, rowData)\">\r\n      @for (col of columns; track col) {\r\n      <td>\r\n        {{ rowData[col.field] }}\r\n      </td>\r\n      }\r\n      @if (showActions) {\r\n      <td>\r\n        <div class=\"flex gap-2\">\r\n          @for (button of actionButtons; track button) {\r\n          <app-button [icon]=\"button.icon\" [severity]=\"'primary'\" variant=\"text\" [rounded]=\"true\"\r\n            [ariaLabel]=\"button.ariaLabel | translate\" (onClick)=\"onAction(button.action, rowData)\">\r\n          </app-button>\r\n          }\r\n        </div>\r\n      </td>\r\n      }\r\n    </tr>\r\n  </ng-template>\r\n\r\n  @if (footerTitle) {\r\n  <ng-template pTemplate=\"footer\">\r\n    <div>{{footerTitle}}</div>\r\n  </ng-template>\r\n  }\r\n\r\n  <ng-template pTemplate=\"emptymessage\">\r\n    <tr>\r\n      <td [attr.colspan]=\"showActions ? cols.length + 1 : cols.length\" class=\"text-center p-4\">\r\n        <i class=\"pi pi-folder-open\" style=\"font-size: 2rem; opacity: 0.5\"></i>\r\n        <p>{{ 'TABLE.NO_ITEMS' | translate }}</p>\r\n      </td>\r\n    </tr>\r\n  </ng-template>\r\n</p-table>\r\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-81b90679872b2e08ad33f41fac29f7ff2e731644168f1a3310de0e2e55c3dc670cdf96a643acb914b746087baa5a4b306b7b714052b818609d6b653486212bb2",
            "file": "src/app/shared/components/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToastModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ToastModule } from 'primeng/toast';\n\n@Component({\n  selector: 'app-toast',\n  standalone: true,\n  imports: [ToastModule],\n  templateUrl: './toast.component.html',\n  styleUrl: './toast.component.scss',\n})\nexport class ToastComponent {}\n",
            "styleUrl": "./toast.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p-toast></p-toast>\n"
        },
        {
            "name": "ToggleSwitchComponent",
            "id": "component-ToggleSwitchComponent-f28ea1e7002dd853d906ebbd1fd7213b4ad0b4d243b92d79201c409e6ac551d64779f37f078577f3111ade2398475daabd2243737ad113b1f7ac9ad4de9f4bb3",
            "file": "src/app/shared/components/toggle-switch/toggle-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleSwitchComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-toggle-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toggle-switch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "iconOff",
                    "defaultValue": "'pi-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconOn",
                    "defaultValue": "'pi-check'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`toggle-switch-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToggleSwitchModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { ToggleSwitchModule } from 'primeng/toggleswitch';\nimport { IToggleSwitchProps } from '../../types/toogleSwitch.types';\n\n@Component({\n  selector: 'app-toggle-switch',\n  standalone: true,\n  imports: [ToggleSwitchModule, ReactiveFormsModule, FormsModule, CommonModule],\n  templateUrl: './toggle-switch.component.html',\n  styleUrl: './toggle-switch.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ToggleSwitchComponent),\n      multi: true,\n    },\n  ],\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor, IToggleSwitchProps {\n  @Input() iconOn = 'pi-check';\n  @Input() iconOff = 'pi-times';\n  @Input() invalid = false;\n  @Input() label?: string;\n  @Input() labelPosition = 'right';\n  @Input() styleClass?: string;\n  @Input() errorMessage?: string;\n  @Input() required?: boolean;\n  @Input() formControl!: FormControl;\n\n  @Output() valueChange = new EventEmitter<boolean>();\n\n  id = `toggle-switch-${Math.random().toString(36).substr(2, 9)}`;\n\n  private _value = false;\n  touched = false;\n\n  @Input()\n  get value(): boolean {\n    return this._value;\n  }\n\n  set value(val: boolean) {\n    if (this._value !== val) {\n      this._value = val;\n      this.onChange(val);\n      this.valueChange.emit(val);\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange: (value: boolean) => void = () => {};\n  onTouched = () => {\n    this.touched = true;\n  };\n\n  writeValue(value: boolean): void {\n    this._value = value !== null && value !== undefined ? value : false;\n  }\n\n  registerOnChange(fn: (value: boolean) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  onInput(event: boolean): void {\n    this.value = event;\n    this.onTouched();\n  }\n}\n",
            "styleUrl": "./toggle-switch.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IToggleSwitchProps"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                }
            },
            "templateData": "<div>\n  @if (label) {\n    <label [class.required]=\"required\" [for]=\"id\" class=\"ml-2\">\n      {{ label }}\n      @if (required) {\n        <span class=\"required-marker\">*</span>\n      }\n    </label>\n  }\n\n  @if (iconOff && iconOn) {\n    <p-toggleswitch\n      [formControl]=\"formControl\"\n      [class]=\"invalid ? styleClass + 'ng-dirty ng-invalid' : styleClass\"\n    >\n      <ng-template pTemplate=\"handle\" let-checked=\"checked\">\n        <i [ngClass]=\"['!text-xs', 'pi', checked ? iconOn : iconOff]\"></i>\n      </ng-template>\n    </p-toggleswitch>\n  } @else {\n    <p-toggleSwitch\n      [formControl]=\"formControl\"\n      [class]=\"invalid ? styleClass + 'ng-dirty ng-invalid' : styleClass\"\n    >\n    </p-toggleSwitch>\n  }\n\n  @if (invalid && errorMessage && touched) {\n    <small class=\"p-error\">{{ errorMessage }}</small>\n  }\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(\r\n      withInterceptors([errorInterceptor, authInterceptor, refreshTokenInterceptor])\r\n    ),\r\n    provideAnimationsAsync(),\r\n    ɵBrowserAnimationBuilder,\r\n    providePrimeNG({\r\n      theme: {\r\n        preset: Aura,\r\n      },\r\n    }),\r\n    MessageService,\r\n    importProvidersFrom([\r\n      TranslateModule.forRoot({\r\n        loader: {\r\n          provide: TranslateLoader,\r\n          useFactory: httpLoaderFactory,\r\n          deps: [HttpClient],\r\n        },\r\n      }),\r\n    ]),\r\n  ],\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  if (authService.isAuth()) {\n    return true;\n  }\n\n  const url = state.url;\n  if (url && url !== '/' && url !== `/${RouterEnum.login}`) {\n    router.navigate([RouterEnum.login], {\n      queryParams: { returnUrl: url },\n    });\n  } else {\n    router.navigate([RouterEnum.login]);\n  }\n\n  return false;\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n\n  const accessToken = tokenService.getAccessToken();\n\n  if (accessToken && tokenService.validateToken(accessToken)) {\n    const clonedReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    return next(clonedReq);\n  } else {\n    return next(req);\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiURL: 'http://localhost:5238',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiURL: 'http://localhost:5238',\n}"
            },
            {
                "name": "equivalentValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/validators/equivalent.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  passwdControlName: string,\r\n  secondPasswdControlName: string\r\n): ValidatorFn => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const passwdControl = control.get(passwdControlName);\r\n    const secondPasswdControl = control.get(secondPasswdControlName);\r\n\r\n    if (secondPasswdControl?.value && secondPasswdControl?.value !== passwdControl?.value) {\r\n      secondPasswdControl.setErrors({\r\n        passwordsNotEqual: true,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n}"
            },
            {
                "name": "errorInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const toastService = inject(ToastService);\r\n  const translateService = inject(TranslateService);\r\n  const tokenService = inject(TokenService);\r\n\r\n  return next(req).pipe(\r\n    catchError((err: HttpErrorResponse) => {\r\n      let errorMessage = '';\r\n\r\n      switch (err.status) {\r\n        case 400:\r\n          if (err.error.message.includes('User is already registered')) {\r\n            errorMessage = 'ERRORS.EMAIL_OR_USER_ALREADY_EXISTS';\r\n          } else {\r\n            errorMessage = 'ERRORS.BAD_REQUEST';\r\n          }\r\n          break;\r\n        case 401:\r\n          if (err.error.message.includes('Invalid credentials')) {\r\n            errorMessage = 'ERRORS.INVALID_CREDENTIALS';\r\n          } else {\r\n            errorMessage = 'ERRORS.UNAUTHORIZED';\r\n          }\r\n          break;\r\n        case 403:\r\n          errorMessage = 'ERRORS.FORBIDDEN';\r\n          break;\r\n        case 404:\r\n          errorMessage = 'ERRORS.NOT_FOUND';\r\n          break;\r\n        case 500:\r\n          errorMessage = 'ERRORS.INTERNAL_SERVER_ERROR';\r\n          break;\r\n        default:\r\n          errorMessage = 'ERRORS.UNKNOWN';\r\n          break;\r\n      }\r\n\r\n      if (err.status === 401 && tokenService.validateRefreshToken(tokenService.getRefreshToken())) {\r\n        return EMPTY;\r\n      }\r\n\r\n      translateService.get(['ERRORS.TITLE', errorMessage]).subscribe(translations => {\r\n        const translatedTitle = translations['ERRORS.TITLE'];\r\n        const translatedMessage = translations[errorMessage];\r\n        toastService.showError(translatedTitle, translatedMessage);\r\n        console.error(err.message);\r\n      });\r\n\r\n      return throwError(() => err);\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "httpLoaderFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TranslateHttpLoader",
                "defaultValue": "(http: HttpClient) =>\r\n  new TranslateHttpLoader(http, 'localization/i18n/', '.json')"
            },
            {
                "name": "initExampleCrudForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initExampleCrudForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<ExampleCrudForm> => {\n  return new FormGroup({\n    id: new FormControl('', {\n      nonNullable: true,\n    }),\n    name: new FormControl('', {\n      validators: [\n        Validators.required,\n        Validators.minLength(VALIDATION_LENGTHS.MIN_NAME),\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_NAME),\n      ],\n      nonNullable: true,\n    }),\n    count: new FormControl(0, {\n      validators: [Validators.required, Validators.min(0)],\n      nonNullable: true,\n    }),\n    price: new FormControl(0, {\n      validators: [Validators.required, Validators.min(0)],\n      nonNullable: true,\n    }),\n    isZiemniak: new FormControl(false, {\n      validators: [Validators.required],\n      nonNullable: true,\n    }),\n    arrivalDate: new FormControl(new Date(), {\n      validators: [Validators.required],\n      nonNullable: true,\n    }),\n  });\n}"
            },
            {
                "name": "initLoginForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initLoginForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<LoginForm> => {\n  return new FormGroup({\n    email: new FormControl('', {\n      validators: [\n        Validators.required,\n        Validators.email,\n        Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\n      ],\n      nonNullable: true,\n    }),\n    password: new FormControl('', {\n      validators: [\n        Validators.required,\n        Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\n      ],\n      nonNullable: true,\n    }),\n  });\n}"
            },
            {
                "name": "initPasswdRecoveryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initPasswdRecoveryForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<PasswdRecoveryForm> => {\n  return new FormGroup({\n    email: new FormControl('', {\n      validators: [Validators.required, Validators.email],\n      nonNullable: true,\n    }),\n  });\n}"
            },
            {
                "name": "initPasswordsForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initPasswordsForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<PasswordsForm> => {\r\n  return new FormGroup(\r\n    {\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      repeatedPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'repeatedPassword')] }\r\n  );\r\n}"
            },
            {
                "name": "initRegisterForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initRegisterForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<RegisterForm> => {\r\n  return new FormGroup(\r\n    {\r\n      username: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      firstName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      lastName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      email: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      confirmPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'confirmPassword')] }\r\n  );\r\n}"
            },
            {
                "name": "initThemeForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initThemeForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<ThemeForm> => {\n  return new FormGroup({\n    theme: new FormControl(false, {\n      validators: [Validators.required],\n      nonNullable: true,\n    }),\n  });\n}"
            },
            {
                "name": "isRefreshing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "false"
            },
            {
                "name": "MenuConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/menu.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  title: 'MENU.TITLE',\n  footerTitle: 'MENU.FOOTER_TITLE',\n  authMenuItems: [{ label: 'MENU.PROFILE', routerLink: `/${RouterEnum.settings}` }],\n  nonAuthMenuItems: [\n    { label: 'MENU.LOGIN', routerLink: `/${RouterEnum.login}` },\n    { label: 'MENU.REGISTER', routerLink: `/${RouterEnum.register}` },\n  ],\n  langs: [\n    { label: 'English', value: LanguageCode.ENGLISH },\n    { label: 'Polski', value: LanguageCode.POLISH },\n  ],\n}"
            },
            {
                "name": "refreshTokenInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  if (req.url.includes(ApiEndpoints.REFRESH_TOKEN)) {\r\n    return next(req);\r\n  }\r\n\r\n  return next(req).pipe(\r\n    catchError((error: HttpErrorResponse) => {\r\n      if (error.status === 401 && !isRefreshing) {\r\n        isRefreshing = true;\r\n\r\n        const accessToken = tokenService.getAccessToken();\r\n        const refreshToken = tokenService.getRefreshToken();\r\n\r\n        if (accessToken && refreshToken) {\r\n          return tokenService.refreshToken({ accessToken, refreshToken }).pipe(\r\n            switchMap((newTokens: IAuthTokensResponseDto) => {\r\n              const newAccessToken: IAccessToken = newTokens.accessToken;\r\n              const newRefreshToken: IRefreshToken = {\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresAt: newTokens.expiresAt,\r\n              };\r\n              tokenService.setTokens(newAccessToken, newRefreshToken);\r\n\r\n              const clonedReq = req.clone({\r\n                setHeaders: {\r\n                  Authorization: `Bearer ${newTokens.accessToken}`,\r\n                },\r\n              });\r\n              isRefreshing = false;\r\n              return next(clonedReq);\r\n            }),\r\n            catchError(refreshError => {\r\n              isRefreshing = false;\r\n              tokenService.removeTokens();\r\n              return throwError(() => refreshError);\r\n            })\r\n          );\r\n        } else {\r\n          isRefreshing = false;\r\n          tokenService.removeTokens();\r\n          return throwError(() => error);\r\n        }\r\n      } else {\r\n        return throwError(() => error);\r\n      }\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "roleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/role.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\n  const roleService = inject(RoleService);\n  const requiredRole = route.data['roles'];\n\n  return roleService.isAuthorized(requiredRole);\n}"
            },
            {
                "name": "unAuthGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/unauth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  if (!authService.isAuth()) {\n    return true;\n  }\n\n  router.navigate([RouterEnum.home]);\n  return false;\n}"
            },
            {
                "name": "VALIDATION_LENGTHS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/validations.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  MIN_EMAIL: 3,\n  MAX_EMAIL: 50,\n  MIN_PASSWORD: 8,\n  MAX_PASSWORD: 75,\n  MIN_USERNAME: 3,\n  MAX_USERNAME: 50,\n  MIN_NAME: 3,\n  MAX_NAME: 50,\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AutocompleteBasic",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"on\" | \"off\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAccessToken",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "src/app/core/_models/tokens.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 154
            },
            {
                "name": "IAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IAutocompletePassword | AutocompleteBasic | IAutocompletePersonalInfo | IAutocompleteAddress | IAutocompleteTelephone | IAutocompleteCreditCard | IAutocompleteDate | IAutocompleteTransaction | IAutocompleteMisc",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteAddress",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level1\" | \"address-level2\" | \"address-level3\" | \"address-level4\" | \"country\" | \"country-name\" | \"postal-code\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteCreditCard",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteDate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteMisc",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sex\" | \"photo\" | \"url\" | \"impp\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompletePassword",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"new-password\" | \"current-password\" | \"one-time-code\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompletePersonalInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AutocompleteBasic | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"organization-title\" | \"organization\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteTelephone",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteTransaction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"transaction-currency\" | \"transaction-amount\" | \"language\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonBadgeSeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonIconPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonSeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warn\" | \"help\" | \"danger\" | \"contrast\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"outlined\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IFileUploadMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"advanced\"",
                "file": "src/app/shared/types/fileUploader.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IInputIcons",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"user\" | \"map\" | \"clock\" | \"star\" | \"check\" | \"times\" | \"shopping-cart\" | \"search\"",
                "file": "src/app/shared/types/input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IInputTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"number\" | \"email\" | \"password\" | \"tel\" | \"url\"",
                "file": "src/app/shared/types/input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IKeys",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"tl\" | \"tc\" | \"tr\" | \"bl\" | \"bc\" | \"br\" | \"c\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ILabelVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"over\" | \"in\" | \"on\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ILangs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Ilang[]",
                "file": "src/app/shared/types/navbar.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "IPositions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\" | \"center\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ISelectOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ISelectOption[]",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "ISeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled\" | \"outlined\"",
                "file": "src/app/shared/types/password-input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled\" | \"outlined\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"both\"",
                "file": "src/app/shared/types/file-type.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"both\"",
                "file": "src/app/shared/types/table.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "ApiEndpoints",
                "childs": [
                    {
                        "name": "SIGN_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/login"
                    },
                    {
                        "name": "SIGN_UP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/register"
                    },
                    {
                        "name": "RESET_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "CHANGE_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "REFRESH_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/refresh-token"
                    },
                    {
                        "name": "REVOKE_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/revoke-token"
                    },
                    {
                        "name": "GET_USERS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/users"
                    },
                    {
                        "name": "GET_USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/users"
                    },
                    {
                        "name": "GET_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "GET_FILES_LIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "SEND_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files/upload"
                    },
                    {
                        "name": "DOWNLOAD_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files/download"
                    },
                    {
                        "name": "EDIT_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "DELETE_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "GET_FILES_STATS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files/stats"
                    },
                    {
                        "name": "KARMELKI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/karmelki"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/api-endpoints.enum.ts"
            },
            {
                "name": "LanguageCode",
                "childs": [
                    {
                        "name": "POLISH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pl"
                    },
                    {
                        "name": "ENGLISH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "en"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/LanguageCode.enum.ts"
            },
            {
                "name": "RolesEnum",
                "childs": [
                    {
                        "name": "USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "USER"
                    },
                    {
                        "name": "MOD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MOD"
                    },
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADMIN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/roles.enum.ts"
            },
            {
                "name": "RouterEnum",
                "childs": [
                    {
                        "name": "home",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "login",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "login"
                    },
                    {
                        "name": "register",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "register"
                    },
                    {
                        "name": "logout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "logout"
                    },
                    {
                        "name": "settings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "settings"
                    },
                    {
                        "name": "admin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "admin"
                    },
                    {
                        "name": "changePassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "change-password"
                    },
                    {
                        "name": "deleteAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "deleteAccount"
                    },
                    {
                        "name": "forgetPassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "forget-password"
                    },
                    {
                        "name": "preferences",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "preferences"
                    },
                    {
                        "name": "fileDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "file-details"
                    },
                    {
                        "name": "notFound",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "not-found"
                    },
                    {
                        "name": "karmelki",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "karmelki"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/router.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(\r\n      withInterceptors([errorInterceptor, authInterceptor, refreshTokenInterceptor])\r\n    ),\r\n    provideAnimationsAsync(),\r\n    ɵBrowserAnimationBuilder,\r\n    providePrimeNG({\r\n      theme: {\r\n        preset: Aura,\r\n      },\r\n    }),\r\n    MessageService,\r\n    importProvidersFrom([\r\n      TranslateModule.forRoot({\r\n        loader: {\r\n          provide: TranslateLoader,\r\n          useFactory: httpLoaderFactory,\r\n          deps: [HttpClient],\r\n        },\r\n      }),\r\n    ]),\r\n  ],\r\n}"
                },
                {
                    "name": "httpLoaderFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateHttpLoader",
                    "defaultValue": "(http: HttpClient) =>\r\n  new TranslateHttpLoader(http, 'localization/i18n/', '.json')"
                }
            ],
            "src/app/core/_guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  if (authService.isAuth()) {\n    return true;\n  }\n\n  const url = state.url;\n  if (url && url !== '/' && url !== `/${RouterEnum.login}`) {\n    router.navigate([RouterEnum.login], {\n      queryParams: { returnUrl: url },\n    });\n  } else {\n    router.navigate([RouterEnum.login]);\n  }\n\n  return false;\n}"
                }
            ],
            "src/app/core/_interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const tokenService = inject(TokenService);\n\n  const accessToken = tokenService.getAccessToken();\n\n  if (accessToken && tokenService.validateToken(accessToken)) {\n    const clonedReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    return next(clonedReq);\n  } else {\n    return next(req);\n  }\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiURL: 'http://localhost:5238',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiURL: 'http://localhost:5238',\n}"
                }
            ],
            "src/app/shared/validators/equivalent.validator.ts": [
                {
                    "name": "equivalentValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/validators/equivalent.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  passwdControlName: string,\r\n  secondPasswdControlName: string\r\n): ValidatorFn => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const passwdControl = control.get(passwdControlName);\r\n    const secondPasswdControl = control.get(secondPasswdControlName);\r\n\r\n    if (secondPasswdControl?.value && secondPasswdControl?.value !== passwdControl?.value) {\r\n      secondPasswdControl.setErrors({\r\n        passwordsNotEqual: true,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n}"
                }
            ],
            "src/app/core/_interceptors/error.interceptor.ts": [
                {
                    "name": "errorInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const toastService = inject(ToastService);\r\n  const translateService = inject(TranslateService);\r\n  const tokenService = inject(TokenService);\r\n\r\n  return next(req).pipe(\r\n    catchError((err: HttpErrorResponse) => {\r\n      let errorMessage = '';\r\n\r\n      switch (err.status) {\r\n        case 400:\r\n          if (err.error.message.includes('User is already registered')) {\r\n            errorMessage = 'ERRORS.EMAIL_OR_USER_ALREADY_EXISTS';\r\n          } else {\r\n            errorMessage = 'ERRORS.BAD_REQUEST';\r\n          }\r\n          break;\r\n        case 401:\r\n          if (err.error.message.includes('Invalid credentials')) {\r\n            errorMessage = 'ERRORS.INVALID_CREDENTIALS';\r\n          } else {\r\n            errorMessage = 'ERRORS.UNAUTHORIZED';\r\n          }\r\n          break;\r\n        case 403:\r\n          errorMessage = 'ERRORS.FORBIDDEN';\r\n          break;\r\n        case 404:\r\n          errorMessage = 'ERRORS.NOT_FOUND';\r\n          break;\r\n        case 500:\r\n          errorMessage = 'ERRORS.INTERNAL_SERVER_ERROR';\r\n          break;\r\n        default:\r\n          errorMessage = 'ERRORS.UNKNOWN';\r\n          break;\r\n      }\r\n\r\n      if (err.status === 401 && tokenService.validateRefreshToken(tokenService.getRefreshToken())) {\r\n        return EMPTY;\r\n      }\r\n\r\n      translateService.get(['ERRORS.TITLE', errorMessage]).subscribe(translations => {\r\n        const translatedTitle = translations['ERRORS.TITLE'];\r\n        const translatedMessage = translations[errorMessage];\r\n        toastService.showError(translatedTitle, translatedMessage);\r\n        console.error(err.message);\r\n      });\r\n\r\n      return throwError(() => err);\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/shared/services/forms/initExampleCrudForm.ts": [
                {
                    "name": "initExampleCrudForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initExampleCrudForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<ExampleCrudForm> => {\n  return new FormGroup({\n    id: new FormControl('', {\n      nonNullable: true,\n    }),\n    name: new FormControl('', {\n      validators: [\n        Validators.required,\n        Validators.minLength(VALIDATION_LENGTHS.MIN_NAME),\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_NAME),\n      ],\n      nonNullable: true,\n    }),\n    count: new FormControl(0, {\n      validators: [Validators.required, Validators.min(0)],\n      nonNullable: true,\n    }),\n    price: new FormControl(0, {\n      validators: [Validators.required, Validators.min(0)],\n      nonNullable: true,\n    }),\n    isZiemniak: new FormControl(false, {\n      validators: [Validators.required],\n      nonNullable: true,\n    }),\n    arrivalDate: new FormControl(new Date(), {\n      validators: [Validators.required],\n      nonNullable: true,\n    }),\n  });\n}"
                }
            ],
            "src/app/shared/services/forms/initLoginForm.ts": [
                {
                    "name": "initLoginForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initLoginForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<LoginForm> => {\n  return new FormGroup({\n    email: new FormControl('', {\n      validators: [\n        Validators.required,\n        Validators.email,\n        Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\n      ],\n      nonNullable: true,\n    }),\n    password: new FormControl('', {\n      validators: [\n        Validators.required,\n        Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\n      ],\n      nonNullable: true,\n    }),\n  });\n}"
                }
            ],
            "src/app/shared/services/forms/initPasswdRecoveryForm.ts": [
                {
                    "name": "initPasswdRecoveryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initPasswdRecoveryForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<PasswdRecoveryForm> => {\n  return new FormGroup({\n    email: new FormControl('', {\n      validators: [Validators.required, Validators.email],\n      nonNullable: true,\n    }),\n  });\n}"
                }
            ],
            "src/app/shared/services/forms/initPasswordsForm.ts": [
                {
                    "name": "initPasswordsForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initPasswordsForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<PasswordsForm> => {\r\n  return new FormGroup(\r\n    {\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      repeatedPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'repeatedPassword')] }\r\n  );\r\n}"
                }
            ],
            "src/app/shared/services/forms/initRegisterForm.ts": [
                {
                    "name": "initRegisterForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initRegisterForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<RegisterForm> => {\r\n  return new FormGroup(\r\n    {\r\n      username: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      firstName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      lastName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      email: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      confirmPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'confirmPassword')] }\r\n  );\r\n}"
                }
            ],
            "src/app/shared/services/forms/initThemeForm.ts": [
                {
                    "name": "initThemeForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initThemeForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<ThemeForm> => {\n  return new FormGroup({\n    theme: new FormControl(false, {\n      validators: [Validators.required],\n      nonNullable: true,\n    }),\n  });\n}"
                }
            ],
            "src/app/core/_interceptors/refresh-token.interceptor.ts": [
                {
                    "name": "isRefreshing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "false"
                },
                {
                    "name": "refreshTokenInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  if (req.url.includes(ApiEndpoints.REFRESH_TOKEN)) {\r\n    return next(req);\r\n  }\r\n\r\n  return next(req).pipe(\r\n    catchError((error: HttpErrorResponse) => {\r\n      if (error.status === 401 && !isRefreshing) {\r\n        isRefreshing = true;\r\n\r\n        const accessToken = tokenService.getAccessToken();\r\n        const refreshToken = tokenService.getRefreshToken();\r\n\r\n        if (accessToken && refreshToken) {\r\n          return tokenService.refreshToken({ accessToken, refreshToken }).pipe(\r\n            switchMap((newTokens: IAuthTokensResponseDto) => {\r\n              const newAccessToken: IAccessToken = newTokens.accessToken;\r\n              const newRefreshToken: IRefreshToken = {\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresAt: newTokens.expiresAt,\r\n              };\r\n              tokenService.setTokens(newAccessToken, newRefreshToken);\r\n\r\n              const clonedReq = req.clone({\r\n                setHeaders: {\r\n                  Authorization: `Bearer ${newTokens.accessToken}`,\r\n                },\r\n              });\r\n              isRefreshing = false;\r\n              return next(clonedReq);\r\n            }),\r\n            catchError(refreshError => {\r\n              isRefreshing = false;\r\n              tokenService.removeTokens();\r\n              return throwError(() => refreshError);\r\n            })\r\n          );\r\n        } else {\r\n          isRefreshing = false;\r\n          tokenService.removeTokens();\r\n          return throwError(() => error);\r\n        }\r\n      } else {\r\n        return throwError(() => error);\r\n      }\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/config/menu.config.ts": [
                {
                    "name": "MenuConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/menu.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  title: 'MENU.TITLE',\n  footerTitle: 'MENU.FOOTER_TITLE',\n  authMenuItems: [{ label: 'MENU.PROFILE', routerLink: `/${RouterEnum.settings}` }],\n  nonAuthMenuItems: [\n    { label: 'MENU.LOGIN', routerLink: `/${RouterEnum.login}` },\n    { label: 'MENU.REGISTER', routerLink: `/${RouterEnum.register}` },\n  ],\n  langs: [\n    { label: 'English', value: LanguageCode.ENGLISH },\n    { label: 'Polski', value: LanguageCode.POLISH },\n  ],\n}"
                }
            ],
            "src/app/core/_guards/role.guard.ts": [
                {
                    "name": "roleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/role.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\n  const roleService = inject(RoleService);\n  const requiredRole = route.data['roles'];\n\n  return roleService.isAuthorized(requiredRole);\n}"
                }
            ],
            "src/app/core/_guards/unauth.guard.ts": [
                {
                    "name": "unAuthGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/unauth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  if (!authService.isAuth()) {\n    return true;\n  }\n\n  router.navigate([RouterEnum.home]);\n  return false;\n}"
                }
            ],
            "src/app/config/validations.config.ts": [
                {
                    "name": "VALIDATION_LENGTHS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/validations.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  MIN_EMAIL: 3,\n  MAX_EMAIL: 50,\n  MIN_PASSWORD: 8,\n  MAX_PASSWORD: 75,\n  MIN_USERNAME: 3,\n  MAX_USERNAME: 50,\n  MIN_NAME: 3,\n  MAX_NAME: 50,\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/enums/api-endpoints.enum.ts": [
                {
                    "name": "ApiEndpoints",
                    "childs": [
                        {
                            "name": "SIGN_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/login"
                        },
                        {
                            "name": "SIGN_UP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/register"
                        },
                        {
                            "name": "RESET_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "CHANGE_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "REFRESH_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/refresh-token"
                        },
                        {
                            "name": "REVOKE_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/revoke-token"
                        },
                        {
                            "name": "GET_USERS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/users"
                        },
                        {
                            "name": "GET_USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/users"
                        },
                        {
                            "name": "GET_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "GET_FILES_LIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "SEND_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files/upload"
                        },
                        {
                            "name": "DOWNLOAD_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files/download"
                        },
                        {
                            "name": "EDIT_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "DELETE_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "GET_FILES_STATS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files/stats"
                        },
                        {
                            "name": "KARMELKI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/karmelki"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/api-endpoints.enum.ts"
                }
            ],
            "src/app/enums/LanguageCode.enum.ts": [
                {
                    "name": "LanguageCode",
                    "childs": [
                        {
                            "name": "POLISH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pl"
                        },
                        {
                            "name": "ENGLISH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "en"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/LanguageCode.enum.ts"
                }
            ],
            "src/app/enums/roles.enum.ts": [
                {
                    "name": "RolesEnum",
                    "childs": [
                        {
                            "name": "USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "USER"
                        },
                        {
                            "name": "MOD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MOD"
                        },
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADMIN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/roles.enum.ts"
                }
            ],
            "src/app/enums/router.enum.ts": [
                {
                    "name": "RouterEnum",
                    "childs": [
                        {
                            "name": "home",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "login"
                        },
                        {
                            "name": "register",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "register"
                        },
                        {
                            "name": "logout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "logout"
                        },
                        {
                            "name": "settings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "settings"
                        },
                        {
                            "name": "admin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "admin"
                        },
                        {
                            "name": "changePassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "change-password"
                        },
                        {
                            "name": "deleteAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "deleteAccount"
                        },
                        {
                            "name": "forgetPassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "forget-password"
                        },
                        {
                            "name": "preferences",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "preferences"
                        },
                        {
                            "name": "fileDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "file-details"
                        },
                        {
                            "name": "notFound",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "not-found"
                        },
                        {
                            "name": "karmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "karmelki"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/router.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/types/auto-complete.types.ts": [
                {
                    "name": "AutocompleteBasic",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"on\" | \"off\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IAutocompletePassword | AutocompleteBasic | IAutocompletePersonalInfo | IAutocompleteAddress | IAutocompleteTelephone | IAutocompleteCreditCard | IAutocompleteDate | IAutocompleteTransaction | IAutocompleteMisc",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteAddress",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level1\" | \"address-level2\" | \"address-level3\" | \"address-level4\" | \"country\" | \"country-name\" | \"postal-code\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteCreditCard",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteDate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteMisc",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sex\" | \"photo\" | \"url\" | \"impp\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompletePassword",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"new-password\" | \"current-password\" | \"one-time-code\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompletePersonalInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AutocompleteBasic | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"organization-title\" | \"organization\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteTelephone",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteTransaction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"transaction-currency\" | \"transaction-amount\" | \"language\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/core/_models/tokens.model.ts": [
                {
                    "name": "IAccessToken",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "src/app/core/_models/tokens.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 154
                }
            ],
            "src/app/shared/types/button.types.ts": [
                {
                    "name": "IButtonBadgeSeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonIconPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonSeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warn\" | \"help\" | \"danger\" | \"contrast\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"outlined\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/fileUploader.types.ts": [
                {
                    "name": "IFileUploadMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"advanced\"",
                    "file": "src/app/shared/types/fileUploader.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/input.types.ts": [
                {
                    "name": "IInputIcons",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"user\" | \"map\" | \"clock\" | \"star\" | \"check\" | \"times\" | \"shopping-cart\" | \"search\"",
                    "file": "src/app/shared/types/input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IInputTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"number\" | \"email\" | \"password\" | \"tel\" | \"url\"",
                    "file": "src/app/shared/types/input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/toast.types.ts": [
                {
                    "name": "IKeys",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"tl\" | \"tc\" | \"tr\" | \"bl\" | \"bc\" | \"br\" | \"c\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IPositions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\" | \"center\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ISeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/select.types.ts": [
                {
                    "name": "ILabelVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"over\" | \"in\" | \"on\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ISelectOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ISelectOption[]",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                },
                {
                    "name": "IVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled\" | \"outlined\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/navbar.types.ts": [
                {
                    "name": "ILangs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Ilang[]",
                    "file": "src/app/shared/types/navbar.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "src/app/shared/types/password-input.types.ts": [
                {
                    "name": "IVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled\" | \"outlined\"",
                    "file": "src/app/shared/types/password-input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/file-type.types.ts": [
                {
                    "name": "Position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"both\"",
                    "file": "src/app/shared/types/file-type.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/table.types.ts": [
                {
                    "name": "Position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"both\"",
                    "file": "src/app/shared/types/table.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/menu.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MenuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/validations.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATION_LENGTHS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/role.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "roleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/unauth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isRefreshing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthRefreshTokensRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthTokensResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILoginDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRegisterDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRevokeTokenRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileEditRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileListResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileStatsDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPageableFileResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseResponseWithoutData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/decoded-token.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDecodedToken",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFile",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/karmelki.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKarmelki",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/karmelki.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKarmelkiResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/language.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILanguage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/paged-query-params.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagedQueryParams",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/query-params.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IQueryParams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/tokens.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRefreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/tokens.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/tokens.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAccessToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/example-crud.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExampleCrudService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/file/file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FileService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/httpRequestFactory/request-factory.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RequestFactoryService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/language/language.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/role/role.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/token/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/example-crud-view/example-crud-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExampleCrudViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/altcha/altcha.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AltchaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirm-modal/confirm-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/context-menu/context-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContextMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/donut-chart/donut-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DonutChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/editor/editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-table/file-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-uploader/file-uploader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/info-modal/info-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/password-input/password-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/reusable-modal/reusable-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReusableModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toggle-switch/toggle-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/has-role.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasRoleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/is-logged-in.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IsLoggedInDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/not-logged-in.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NotLoggedInDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/altcha.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAltchaStatus",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExampleCrudForm",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswdRecoveryForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordsForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterForm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ThemeForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initExampleCrudForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initExampleCrudForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initLoginForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initLoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initPasswdRecoveryForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initPasswdRecoveryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initPasswordsForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initPasswordsForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initRegisterForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initRegisterForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initThemeForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initThemeForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/accordion.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccordionPanelItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/accordion.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccordionProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/altcha.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAltchaProps",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AutocompleteBasic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocomplete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteCreditCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteMisc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompletePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompletePersonalInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteTelephone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteTransaction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IButtonProps",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonBadgeSeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonIconPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonSeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/checkbox.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckboxProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/context-menu.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContextMenuEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/context-menu.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContextMenuProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChartDataset",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDonutChartData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDonutChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDonutChartProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/editor.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEditorProps",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/editor.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITextChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/file-type.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/file-type.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileTableProps",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/file-type.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Position",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileUploadProps",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUploadEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IFileUploadMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/footer.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFooterProps",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/image.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImageProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputProps",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IInputIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IInputTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfirmModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInfoModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Ilang",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavbarProps",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ILangs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPasswordInputProps",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/resuable-modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IReusableModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectProps",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ILabelVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ISelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContextMenuAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableProps",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Position",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IPositions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ISeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toogleSwitch.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggleSwitchProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/equivalent.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "equivalentValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}